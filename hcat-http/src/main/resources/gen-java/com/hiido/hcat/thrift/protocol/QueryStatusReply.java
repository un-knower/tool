/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hiido.hcat.thrift.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-23")
public class QueryStatusReply implements org.apache.thrift.TBase<QueryStatusReply, QueryStatusReply._Fields>, java.io.Serializable, Cloneable, Comparable<QueryStatusReply> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryStatusReply");

  private static final org.apache.thrift.protocol.TField RET_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("retCode", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField RET_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("retMessage", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField QUERY_PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("queryProgress", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryStatusReplyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryStatusReplyTupleSchemeFactory());
  }

  public int retCode; // required
  public String retMessage; // optional
  public QueryProgress queryProgress; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RET_CODE((short)1, "retCode"),
    RET_MESSAGE((short)2, "retMessage"),
    QUERY_PROGRESS((short)3, "queryProgress");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RET_CODE
          return RET_CODE;
        case 2: // RET_MESSAGE
          return RET_MESSAGE;
        case 3: // QUERY_PROGRESS
          return QUERY_PROGRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RETCODE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RET_MESSAGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RET_CODE, new org.apache.thrift.meta_data.FieldMetaData("retCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RET_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("retMessage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("queryProgress", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QueryProgress.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryStatusReply.class, metaDataMap);
  }

  public QueryStatusReply() {
    this.retCode = 0;

  }

  public QueryStatusReply(
    int retCode,
    QueryProgress queryProgress)
  {
    this();
    this.retCode = retCode;
    setRetCodeIsSet(true);
    this.queryProgress = queryProgress;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryStatusReply(QueryStatusReply other) {
    __isset_bitfield = other.__isset_bitfield;
    this.retCode = other.retCode;
    if (other.isSetRetMessage()) {
      this.retMessage = other.retMessage;
    }
    if (other.isSetQueryProgress()) {
      this.queryProgress = new QueryProgress(other.queryProgress);
    }
  }

  public QueryStatusReply deepCopy() {
    return new QueryStatusReply(this);
  }

  @Override
  public void clear() {
    this.retCode = 0;

    this.retMessage = null;
    this.queryProgress = null;
  }

  public int getRetCode() {
    return this.retCode;
  }

  public QueryStatusReply setRetCode(int retCode) {
    this.retCode = retCode;
    setRetCodeIsSet(true);
    return this;
  }

  public void unsetRetCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETCODE_ISSET_ID);
  }

  /** Returns true if field retCode is set (has been assigned a value) and false otherwise */
  public boolean isSetRetCode() {
    return EncodingUtils.testBit(__isset_bitfield, __RETCODE_ISSET_ID);
  }

  public void setRetCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETCODE_ISSET_ID, value);
  }

  public String getRetMessage() {
    return this.retMessage;
  }

  public QueryStatusReply setRetMessage(String retMessage) {
    this.retMessage = retMessage;
    return this;
  }

  public void unsetRetMessage() {
    this.retMessage = null;
  }

  /** Returns true if field retMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetRetMessage() {
    return this.retMessage != null;
  }

  public void setRetMessageIsSet(boolean value) {
    if (!value) {
      this.retMessage = null;
    }
  }

  public QueryProgress getQueryProgress() {
    return this.queryProgress;
  }

  public QueryStatusReply setQueryProgress(QueryProgress queryProgress) {
    this.queryProgress = queryProgress;
    return this;
  }

  public void unsetQueryProgress() {
    this.queryProgress = null;
  }

  /** Returns true if field queryProgress is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryProgress() {
    return this.queryProgress != null;
  }

  public void setQueryProgressIsSet(boolean value) {
    if (!value) {
      this.queryProgress = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RET_CODE:
      if (value == null) {
        unsetRetCode();
      } else {
        setRetCode((Integer)value);
      }
      break;

    case RET_MESSAGE:
      if (value == null) {
        unsetRetMessage();
      } else {
        setRetMessage((String)value);
      }
      break;

    case QUERY_PROGRESS:
      if (value == null) {
        unsetQueryProgress();
      } else {
        setQueryProgress((QueryProgress)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RET_CODE:
      return getRetCode();

    case RET_MESSAGE:
      return getRetMessage();

    case QUERY_PROGRESS:
      return getQueryProgress();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RET_CODE:
      return isSetRetCode();
    case RET_MESSAGE:
      return isSetRetMessage();
    case QUERY_PROGRESS:
      return isSetQueryProgress();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryStatusReply)
      return this.equals((QueryStatusReply)that);
    return false;
  }

  public boolean equals(QueryStatusReply that) {
    if (that == null)
      return false;

    boolean this_present_retCode = true;
    boolean that_present_retCode = true;
    if (this_present_retCode || that_present_retCode) {
      if (!(this_present_retCode && that_present_retCode))
        return false;
      if (this.retCode != that.retCode)
        return false;
    }

    boolean this_present_retMessage = true && this.isSetRetMessage();
    boolean that_present_retMessage = true && that.isSetRetMessage();
    if (this_present_retMessage || that_present_retMessage) {
      if (!(this_present_retMessage && that_present_retMessage))
        return false;
      if (!this.retMessage.equals(that.retMessage))
        return false;
    }

    boolean this_present_queryProgress = true && this.isSetQueryProgress();
    boolean that_present_queryProgress = true && that.isSetQueryProgress();
    if (this_present_queryProgress || that_present_queryProgress) {
      if (!(this_present_queryProgress && that_present_queryProgress))
        return false;
      if (!this.queryProgress.equals(that.queryProgress))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_retCode = true;
    list.add(present_retCode);
    if (present_retCode)
      list.add(retCode);

    boolean present_retMessage = true && (isSetRetMessage());
    list.add(present_retMessage);
    if (present_retMessage)
      list.add(retMessage);

    boolean present_queryProgress = true && (isSetQueryProgress());
    list.add(present_queryProgress);
    if (present_queryProgress)
      list.add(queryProgress);

    return list.hashCode();
  }

  @Override
  public int compareTo(QueryStatusReply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRetCode()).compareTo(other.isSetRetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retCode, other.retCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetMessage()).compareTo(other.isSetRetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retMessage, other.retMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryProgress()).compareTo(other.isSetQueryProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryProgress, other.queryProgress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryStatusReply(");
    boolean first = true;

    sb.append("retCode:");
    sb.append(this.retCode);
    first = false;
    if (isSetRetMessage()) {
      if (!first) sb.append(", ");
      sb.append("retMessage:");
      if (this.retMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.retMessage);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("queryProgress:");
    if (this.queryProgress == null) {
      sb.append("null");
    } else {
      sb.append(this.queryProgress);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'retCode' because it's a primitive and you chose the non-beans generator.
    if (queryProgress == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'queryProgress' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (queryProgress != null) {
      queryProgress.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryStatusReplyStandardSchemeFactory implements SchemeFactory {
    public QueryStatusReplyStandardScheme getScheme() {
      return new QueryStatusReplyStandardScheme();
    }
  }

  private static class QueryStatusReplyStandardScheme extends StandardScheme<QueryStatusReply> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryStatusReply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RET_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.retCode = iprot.readI32();
              struct.setRetCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RET_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.retMessage = iprot.readString();
              struct.setRetMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUERY_PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.queryProgress = new QueryProgress();
              struct.queryProgress.read(iprot);
              struct.setQueryProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetRetCode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'retCode' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryStatusReply struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RET_CODE_FIELD_DESC);
      oprot.writeI32(struct.retCode);
      oprot.writeFieldEnd();
      if (struct.retMessage != null) {
        if (struct.isSetRetMessage()) {
          oprot.writeFieldBegin(RET_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.retMessage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.queryProgress != null) {
        oprot.writeFieldBegin(QUERY_PROGRESS_FIELD_DESC);
        struct.queryProgress.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryStatusReplyTupleSchemeFactory implements SchemeFactory {
    public QueryStatusReplyTupleScheme getScheme() {
      return new QueryStatusReplyTupleScheme();
    }
  }

  private static class QueryStatusReplyTupleScheme extends TupleScheme<QueryStatusReply> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryStatusReply struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.retCode);
      struct.queryProgress.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetRetMessage()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetRetMessage()) {
        oprot.writeString(struct.retMessage);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryStatusReply struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.retCode = iprot.readI32();
      struct.setRetCodeIsSet(true);
      struct.queryProgress = new QueryProgress();
      struct.queryProgress.read(iprot);
      struct.setQueryProgressIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.retMessage = iprot.readString();
        struct.setRetMessageIsSet(true);
      }
    }
  }

}

