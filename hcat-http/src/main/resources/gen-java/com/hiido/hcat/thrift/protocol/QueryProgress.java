/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hiido.hcat.thrift.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-23")
public class QueryProgress implements org.apache.thrift.TBase<QueryProgress, QueryProgress._Fields>, java.io.Serializable, Cloneable, Comparable<QueryProgress> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryProgress");

  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobId", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField N_FIELD_DESC = new org.apache.thrift.protocol.TField("n", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ENGINE_FIELD_DESC = new org.apache.thrift.protocol.TField("engine", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ERRMSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errmsg", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RES_FIELD_DESC = new org.apache.thrift.protocol.TField("res", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fields", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField RES_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("resSize", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("progress", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField IS_FETCH_TASK_FIELD_DESC = new org.apache.thrift.protocol.TField("isFetchTask", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField FETCH_DIRS_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchDirs", org.apache.thrift.protocol.TType.LIST, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryProgressStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryProgressTupleSchemeFactory());
  }

  public List<String> jobId; // required
  public int state; // required
  public int n; // required
  public String engine; // required
  public String errmsg; // required
  public String res; // optional
  public List<Field> fields; // optional
  public long startTime; // required
  public long endTime; // required
  public long resSize; // required
  public double progress; // required
  public boolean isFetchTask; // required
  public List<String> fetchDirs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    JOB_ID((short)1, "jobId"),
    STATE((short)2, "state"),
    N((short)3, "n"),
    ENGINE((short)4, "engine"),
    ERRMSG((short)5, "errmsg"),
    RES((short)6, "res"),
    FIELDS((short)7, "fields"),
    START_TIME((short)8, "startTime"),
    END_TIME((short)9, "endTime"),
    RES_SIZE((short)10, "resSize"),
    PROGRESS((short)11, "progress"),
    IS_FETCH_TASK((short)12, "isFetchTask"),
    FETCH_DIRS((short)13, "fetchDirs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOB_ID
          return JOB_ID;
        case 2: // STATE
          return STATE;
        case 3: // N
          return N;
        case 4: // ENGINE
          return ENGINE;
        case 5: // ERRMSG
          return ERRMSG;
        case 6: // RES
          return RES;
        case 7: // FIELDS
          return FIELDS;
        case 8: // START_TIME
          return START_TIME;
        case 9: // END_TIME
          return END_TIME;
        case 10: // RES_SIZE
          return RES_SIZE;
        case 11: // PROGRESS
          return PROGRESS;
        case 12: // IS_FETCH_TASK
          return IS_FETCH_TASK;
        case 13: // FETCH_DIRS
          return FETCH_DIRS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATE_ISSET_ID = 0;
  private static final int __N_ISSET_ID = 1;
  private static final int __STARTTIME_ISSET_ID = 2;
  private static final int __ENDTIME_ISSET_ID = 3;
  private static final int __RESSIZE_ISSET_ID = 4;
  private static final int __PROGRESS_ISSET_ID = 5;
  private static final int __ISFETCHTASK_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RES,_Fields.FIELDS,_Fields.FETCH_DIRS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.N, new org.apache.thrift.meta_data.FieldMetaData("n", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENGINE, new org.apache.thrift.meta_data.FieldMetaData("engine", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERRMSG, new org.apache.thrift.meta_data.FieldMetaData("errmsg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RES, new org.apache.thrift.meta_data.FieldMetaData("res", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELDS, new org.apache.thrift.meta_data.FieldMetaData("fields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Field.class))));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RES_SIZE, new org.apache.thrift.meta_data.FieldMetaData("resSize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("progress", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_FETCH_TASK, new org.apache.thrift.meta_data.FieldMetaData("isFetchTask", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FETCH_DIRS, new org.apache.thrift.meta_data.FieldMetaData("fetchDirs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryProgress.class, metaDataMap);
  }

  public QueryProgress() {
    this.startTime = 0L;

    this.endTime = 0L;

    this.resSize = 0L;

  }

  public QueryProgress(
    List<String> jobId,
    int state,
    int n,
    String engine,
    String errmsg,
    long startTime,
    long endTime,
    long resSize,
    double progress,
    boolean isFetchTask)
  {
    this();
    this.jobId = jobId;
    this.state = state;
    setStateIsSet(true);
    this.n = n;
    setNIsSet(true);
    this.engine = engine;
    this.errmsg = errmsg;
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.resSize = resSize;
    setResSizeIsSet(true);
    this.progress = progress;
    setProgressIsSet(true);
    this.isFetchTask = isFetchTask;
    setIsFetchTaskIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryProgress(QueryProgress other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetJobId()) {
      List<String> __this__jobId = new ArrayList<String>(other.jobId);
      this.jobId = __this__jobId;
    }
    this.state = other.state;
    this.n = other.n;
    if (other.isSetEngine()) {
      this.engine = other.engine;
    }
    if (other.isSetErrmsg()) {
      this.errmsg = other.errmsg;
    }
    if (other.isSetRes()) {
      this.res = other.res;
    }
    if (other.isSetFields()) {
      List<Field> __this__fields = new ArrayList<Field>(other.fields.size());
      for (Field other_element : other.fields) {
        __this__fields.add(new Field(other_element));
      }
      this.fields = __this__fields;
    }
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    this.resSize = other.resSize;
    this.progress = other.progress;
    this.isFetchTask = other.isFetchTask;
    if (other.isSetFetchDirs()) {
      List<String> __this__fetchDirs = new ArrayList<String>(other.fetchDirs);
      this.fetchDirs = __this__fetchDirs;
    }
  }

  public QueryProgress deepCopy() {
    return new QueryProgress(this);
  }

  @Override
  public void clear() {
    this.jobId = null;
    setStateIsSet(false);
    this.state = 0;
    setNIsSet(false);
    this.n = 0;
    this.engine = null;
    this.errmsg = null;
    this.res = null;
    this.fields = null;
    this.startTime = 0L;

    this.endTime = 0L;

    this.resSize = 0L;

    setProgressIsSet(false);
    this.progress = 0.0;
    setIsFetchTaskIsSet(false);
    this.isFetchTask = false;
    this.fetchDirs = null;
  }

  public int getJobIdSize() {
    return (this.jobId == null) ? 0 : this.jobId.size();
  }

  public java.util.Iterator<String> getJobIdIterator() {
    return (this.jobId == null) ? null : this.jobId.iterator();
  }

  public void addToJobId(String elem) {
    if (this.jobId == null) {
      this.jobId = new ArrayList<String>();
    }
    this.jobId.add(elem);
  }

  public List<String> getJobId() {
    return this.jobId;
  }

  public QueryProgress setJobId(List<String> jobId) {
    this.jobId = jobId;
    return this;
  }

  public void unsetJobId() {
    this.jobId = null;
  }

  /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobId() {
    return this.jobId != null;
  }

  public void setJobIdIsSet(boolean value) {
    if (!value) {
      this.jobId = null;
    }
  }

  public int getState() {
    return this.state;
  }

  public QueryProgress setState(int state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public int getN() {
    return this.n;
  }

  public QueryProgress setN(int n) {
    this.n = n;
    setNIsSet(true);
    return this;
  }

  public void unsetN() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __N_ISSET_ID);
  }

  /** Returns true if field n is set (has been assigned a value) and false otherwise */
  public boolean isSetN() {
    return EncodingUtils.testBit(__isset_bitfield, __N_ISSET_ID);
  }

  public void setNIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __N_ISSET_ID, value);
  }

  public String getEngine() {
    return this.engine;
  }

  public QueryProgress setEngine(String engine) {
    this.engine = engine;
    return this;
  }

  public void unsetEngine() {
    this.engine = null;
  }

  /** Returns true if field engine is set (has been assigned a value) and false otherwise */
  public boolean isSetEngine() {
    return this.engine != null;
  }

  public void setEngineIsSet(boolean value) {
    if (!value) {
      this.engine = null;
    }
  }

  public String getErrmsg() {
    return this.errmsg;
  }

  public QueryProgress setErrmsg(String errmsg) {
    this.errmsg = errmsg;
    return this;
  }

  public void unsetErrmsg() {
    this.errmsg = null;
  }

  /** Returns true if field errmsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrmsg() {
    return this.errmsg != null;
  }

  public void setErrmsgIsSet(boolean value) {
    if (!value) {
      this.errmsg = null;
    }
  }

  public String getRes() {
    return this.res;
  }

  public QueryProgress setRes(String res) {
    this.res = res;
    return this;
  }

  public void unsetRes() {
    this.res = null;
  }

  /** Returns true if field res is set (has been assigned a value) and false otherwise */
  public boolean isSetRes() {
    return this.res != null;
  }

  public void setResIsSet(boolean value) {
    if (!value) {
      this.res = null;
    }
  }

  public int getFieldsSize() {
    return (this.fields == null) ? 0 : this.fields.size();
  }

  public java.util.Iterator<Field> getFieldsIterator() {
    return (this.fields == null) ? null : this.fields.iterator();
  }

  public void addToFields(Field elem) {
    if (this.fields == null) {
      this.fields = new ArrayList<Field>();
    }
    this.fields.add(elem);
  }

  public List<Field> getFields() {
    return this.fields;
  }

  public QueryProgress setFields(List<Field> fields) {
    this.fields = fields;
    return this;
  }

  public void unsetFields() {
    this.fields = null;
  }

  /** Returns true if field fields is set (has been assigned a value) and false otherwise */
  public boolean isSetFields() {
    return this.fields != null;
  }

  public void setFieldsIsSet(boolean value) {
    if (!value) {
      this.fields = null;
    }
  }

  public long getStartTime() {
    return this.startTime;
  }

  public QueryProgress setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public long getEndTime() {
    return this.endTime;
  }

  public QueryProgress setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public long getResSize() {
    return this.resSize;
  }

  public QueryProgress setResSize(long resSize) {
    this.resSize = resSize;
    setResSizeIsSet(true);
    return this;
  }

  public void unsetResSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESSIZE_ISSET_ID);
  }

  /** Returns true if field resSize is set (has been assigned a value) and false otherwise */
  public boolean isSetResSize() {
    return EncodingUtils.testBit(__isset_bitfield, __RESSIZE_ISSET_ID);
  }

  public void setResSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESSIZE_ISSET_ID, value);
  }

  public double getProgress() {
    return this.progress;
  }

  public QueryProgress setProgress(double progress) {
    this.progress = progress;
    setProgressIsSet(true);
    return this;
  }

  public void unsetProgress() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROGRESS_ISSET_ID);
  }

  /** Returns true if field progress is set (has been assigned a value) and false otherwise */
  public boolean isSetProgress() {
    return EncodingUtils.testBit(__isset_bitfield, __PROGRESS_ISSET_ID);
  }

  public void setProgressIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROGRESS_ISSET_ID, value);
  }

  public boolean isIsFetchTask() {
    return this.isFetchTask;
  }

  public QueryProgress setIsFetchTask(boolean isFetchTask) {
    this.isFetchTask = isFetchTask;
    setIsFetchTaskIsSet(true);
    return this;
  }

  public void unsetIsFetchTask() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFETCHTASK_ISSET_ID);
  }

  /** Returns true if field isFetchTask is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFetchTask() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFETCHTASK_ISSET_ID);
  }

  public void setIsFetchTaskIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFETCHTASK_ISSET_ID, value);
  }

  public int getFetchDirsSize() {
    return (this.fetchDirs == null) ? 0 : this.fetchDirs.size();
  }

  public java.util.Iterator<String> getFetchDirsIterator() {
    return (this.fetchDirs == null) ? null : this.fetchDirs.iterator();
  }

  public void addToFetchDirs(String elem) {
    if (this.fetchDirs == null) {
      this.fetchDirs = new ArrayList<String>();
    }
    this.fetchDirs.add(elem);
  }

  public List<String> getFetchDirs() {
    return this.fetchDirs;
  }

  public QueryProgress setFetchDirs(List<String> fetchDirs) {
    this.fetchDirs = fetchDirs;
    return this;
  }

  public void unsetFetchDirs() {
    this.fetchDirs = null;
  }

  /** Returns true if field fetchDirs is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchDirs() {
    return this.fetchDirs != null;
  }

  public void setFetchDirsIsSet(boolean value) {
    if (!value) {
      this.fetchDirs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case JOB_ID:
      if (value == null) {
        unsetJobId();
      } else {
        setJobId((List<String>)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Integer)value);
      }
      break;

    case N:
      if (value == null) {
        unsetN();
      } else {
        setN((Integer)value);
      }
      break;

    case ENGINE:
      if (value == null) {
        unsetEngine();
      } else {
        setEngine((String)value);
      }
      break;

    case ERRMSG:
      if (value == null) {
        unsetErrmsg();
      } else {
        setErrmsg((String)value);
      }
      break;

    case RES:
      if (value == null) {
        unsetRes();
      } else {
        setRes((String)value);
      }
      break;

    case FIELDS:
      if (value == null) {
        unsetFields();
      } else {
        setFields((List<Field>)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case RES_SIZE:
      if (value == null) {
        unsetResSize();
      } else {
        setResSize((Long)value);
      }
      break;

    case PROGRESS:
      if (value == null) {
        unsetProgress();
      } else {
        setProgress((Double)value);
      }
      break;

    case IS_FETCH_TASK:
      if (value == null) {
        unsetIsFetchTask();
      } else {
        setIsFetchTask((Boolean)value);
      }
      break;

    case FETCH_DIRS:
      if (value == null) {
        unsetFetchDirs();
      } else {
        setFetchDirs((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case JOB_ID:
      return getJobId();

    case STATE:
      return getState();

    case N:
      return getN();

    case ENGINE:
      return getEngine();

    case ERRMSG:
      return getErrmsg();

    case RES:
      return getRes();

    case FIELDS:
      return getFields();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case RES_SIZE:
      return getResSize();

    case PROGRESS:
      return getProgress();

    case IS_FETCH_TASK:
      return isIsFetchTask();

    case FETCH_DIRS:
      return getFetchDirs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case JOB_ID:
      return isSetJobId();
    case STATE:
      return isSetState();
    case N:
      return isSetN();
    case ENGINE:
      return isSetEngine();
    case ERRMSG:
      return isSetErrmsg();
    case RES:
      return isSetRes();
    case FIELDS:
      return isSetFields();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case RES_SIZE:
      return isSetResSize();
    case PROGRESS:
      return isSetProgress();
    case IS_FETCH_TASK:
      return isSetIsFetchTask();
    case FETCH_DIRS:
      return isSetFetchDirs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryProgress)
      return this.equals((QueryProgress)that);
    return false;
  }

  public boolean equals(QueryProgress that) {
    if (that == null)
      return false;

    boolean this_present_jobId = true && this.isSetJobId();
    boolean that_present_jobId = true && that.isSetJobId();
    if (this_present_jobId || that_present_jobId) {
      if (!(this_present_jobId && that_present_jobId))
        return false;
      if (!this.jobId.equals(that.jobId))
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_n = true;
    boolean that_present_n = true;
    if (this_present_n || that_present_n) {
      if (!(this_present_n && that_present_n))
        return false;
      if (this.n != that.n)
        return false;
    }

    boolean this_present_engine = true && this.isSetEngine();
    boolean that_present_engine = true && that.isSetEngine();
    if (this_present_engine || that_present_engine) {
      if (!(this_present_engine && that_present_engine))
        return false;
      if (!this.engine.equals(that.engine))
        return false;
    }

    boolean this_present_errmsg = true && this.isSetErrmsg();
    boolean that_present_errmsg = true && that.isSetErrmsg();
    if (this_present_errmsg || that_present_errmsg) {
      if (!(this_present_errmsg && that_present_errmsg))
        return false;
      if (!this.errmsg.equals(that.errmsg))
        return false;
    }

    boolean this_present_res = true && this.isSetRes();
    boolean that_present_res = true && that.isSetRes();
    if (this_present_res || that_present_res) {
      if (!(this_present_res && that_present_res))
        return false;
      if (!this.res.equals(that.res))
        return false;
    }

    boolean this_present_fields = true && this.isSetFields();
    boolean that_present_fields = true && that.isSetFields();
    if (this_present_fields || that_present_fields) {
      if (!(this_present_fields && that_present_fields))
        return false;
      if (!this.fields.equals(that.fields))
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_resSize = true;
    boolean that_present_resSize = true;
    if (this_present_resSize || that_present_resSize) {
      if (!(this_present_resSize && that_present_resSize))
        return false;
      if (this.resSize != that.resSize)
        return false;
    }

    boolean this_present_progress = true;
    boolean that_present_progress = true;
    if (this_present_progress || that_present_progress) {
      if (!(this_present_progress && that_present_progress))
        return false;
      if (this.progress != that.progress)
        return false;
    }

    boolean this_present_isFetchTask = true;
    boolean that_present_isFetchTask = true;
    if (this_present_isFetchTask || that_present_isFetchTask) {
      if (!(this_present_isFetchTask && that_present_isFetchTask))
        return false;
      if (this.isFetchTask != that.isFetchTask)
        return false;
    }

    boolean this_present_fetchDirs = true && this.isSetFetchDirs();
    boolean that_present_fetchDirs = true && that.isSetFetchDirs();
    if (this_present_fetchDirs || that_present_fetchDirs) {
      if (!(this_present_fetchDirs && that_present_fetchDirs))
        return false;
      if (!this.fetchDirs.equals(that.fetchDirs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_jobId = true && (isSetJobId());
    list.add(present_jobId);
    if (present_jobId)
      list.add(jobId);

    boolean present_state = true;
    list.add(present_state);
    if (present_state)
      list.add(state);

    boolean present_n = true;
    list.add(present_n);
    if (present_n)
      list.add(n);

    boolean present_engine = true && (isSetEngine());
    list.add(present_engine);
    if (present_engine)
      list.add(engine);

    boolean present_errmsg = true && (isSetErrmsg());
    list.add(present_errmsg);
    if (present_errmsg)
      list.add(errmsg);

    boolean present_res = true && (isSetRes());
    list.add(present_res);
    if (present_res)
      list.add(res);

    boolean present_fields = true && (isSetFields());
    list.add(present_fields);
    if (present_fields)
      list.add(fields);

    boolean present_startTime = true;
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true;
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_resSize = true;
    list.add(present_resSize);
    if (present_resSize)
      list.add(resSize);

    boolean present_progress = true;
    list.add(present_progress);
    if (present_progress)
      list.add(progress);

    boolean present_isFetchTask = true;
    list.add(present_isFetchTask);
    if (present_isFetchTask)
      list.add(isFetchTask);

    boolean present_fetchDirs = true && (isSetFetchDirs());
    list.add(present_fetchDirs);
    if (present_fetchDirs)
      list.add(fetchDirs);

    return list.hashCode();
  }

  @Override
  public int compareTo(QueryProgress other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetN()).compareTo(other.isSetN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n, other.n);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEngine()).compareTo(other.isSetEngine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engine, other.engine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrmsg()).compareTo(other.isSetErrmsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrmsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errmsg, other.errmsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRes()).compareTo(other.isSetRes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.res, other.res);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFields()).compareTo(other.isSetFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fields, other.fields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResSize()).compareTo(other.isSetResSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resSize, other.resSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgress()).compareTo(other.isSetProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progress, other.progress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFetchTask()).compareTo(other.isSetIsFetchTask());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFetchTask()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFetchTask, other.isFetchTask);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchDirs()).compareTo(other.isSetFetchDirs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchDirs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchDirs, other.fetchDirs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryProgress(");
    boolean first = true;

    sb.append("jobId:");
    if (this.jobId == null) {
      sb.append("null");
    } else {
      sb.append(this.jobId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("n:");
    sb.append(this.n);
    first = false;
    if (!first) sb.append(", ");
    sb.append("engine:");
    if (this.engine == null) {
      sb.append("null");
    } else {
      sb.append(this.engine);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("errmsg:");
    if (this.errmsg == null) {
      sb.append("null");
    } else {
      sb.append(this.errmsg);
    }
    first = false;
    if (isSetRes()) {
      if (!first) sb.append(", ");
      sb.append("res:");
      if (this.res == null) {
        sb.append("null");
      } else {
        sb.append(this.res);
      }
      first = false;
    }
    if (isSetFields()) {
      if (!first) sb.append(", ");
      sb.append("fields:");
      if (this.fields == null) {
        sb.append("null");
      } else {
        sb.append(this.fields);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("resSize:");
    sb.append(this.resSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("progress:");
    sb.append(this.progress);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFetchTask:");
    sb.append(this.isFetchTask);
    first = false;
    if (isSetFetchDirs()) {
      if (!first) sb.append(", ");
      sb.append("fetchDirs:");
      if (this.fetchDirs == null) {
        sb.append("null");
      } else {
        sb.append(this.fetchDirs);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (jobId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'state' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'n' because it's a primitive and you chose the non-beans generator.
    if (engine == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'engine' was not present! Struct: " + toString());
    }
    if (errmsg == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'errmsg' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'startTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'resSize' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'progress' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isFetchTask' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryProgressStandardSchemeFactory implements SchemeFactory {
    public QueryProgressStandardScheme getScheme() {
      return new QueryProgressStandardScheme();
    }
  }

  private static class QueryProgressStandardScheme extends StandardScheme<QueryProgress> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryProgress struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.jobId = new ArrayList<String>(_list40.size);
                String _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = iprot.readString();
                  struct.jobId.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setJobIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = iprot.readI32();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // N
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.n = iprot.readI32();
              struct.setNIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENGINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.engine = iprot.readString();
              struct.setEngineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ERRMSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errmsg = iprot.readString();
              struct.setErrmsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.res = iprot.readString();
              struct.setResIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                struct.fields = new ArrayList<Field>(_list43.size);
                Field _elem44;
                for (int _i45 = 0; _i45 < _list43.size; ++_i45)
                {
                  _elem44 = new Field();
                  _elem44.read(iprot);
                  struct.fields.add(_elem44);
                }
                iprot.readListEnd();
              }
              struct.setFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RES_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.resSize = iprot.readI64();
              struct.setResSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.progress = iprot.readDouble();
              struct.setProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_FETCH_TASK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFetchTask = iprot.readBool();
              struct.setIsFetchTaskIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FETCH_DIRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                struct.fetchDirs = new ArrayList<String>(_list46.size);
                String _elem47;
                for (int _i48 = 0; _i48 < _list46.size; ++_i48)
                {
                  _elem47 = iprot.readString();
                  struct.fetchDirs.add(_elem47);
                }
                iprot.readListEnd();
              }
              struct.setFetchDirsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetState()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'state' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetN()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'n' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStartTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'startTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetResSize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'resSize' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetProgress()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'progress' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsFetchTask()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isFetchTask' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryProgress struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.jobId != null) {
        oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.jobId.size()));
          for (String _iter49 : struct.jobId)
          {
            oprot.writeString(_iter49);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(struct.state);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(N_FIELD_DESC);
      oprot.writeI32(struct.n);
      oprot.writeFieldEnd();
      if (struct.engine != null) {
        oprot.writeFieldBegin(ENGINE_FIELD_DESC);
        oprot.writeString(struct.engine);
        oprot.writeFieldEnd();
      }
      if (struct.errmsg != null) {
        oprot.writeFieldBegin(ERRMSG_FIELD_DESC);
        oprot.writeString(struct.errmsg);
        oprot.writeFieldEnd();
      }
      if (struct.res != null) {
        if (struct.isSetRes()) {
          oprot.writeFieldBegin(RES_FIELD_DESC);
          oprot.writeString(struct.res);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fields != null) {
        if (struct.isSetFields()) {
          oprot.writeFieldBegin(FIELDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fields.size()));
            for (Field _iter50 : struct.fields)
            {
              _iter50.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RES_SIZE_FIELD_DESC);
      oprot.writeI64(struct.resSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROGRESS_FIELD_DESC);
      oprot.writeDouble(struct.progress);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FETCH_TASK_FIELD_DESC);
      oprot.writeBool(struct.isFetchTask);
      oprot.writeFieldEnd();
      if (struct.fetchDirs != null) {
        if (struct.isSetFetchDirs()) {
          oprot.writeFieldBegin(FETCH_DIRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fetchDirs.size()));
            for (String _iter51 : struct.fetchDirs)
            {
              oprot.writeString(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryProgressTupleSchemeFactory implements SchemeFactory {
    public QueryProgressTupleScheme getScheme() {
      return new QueryProgressTupleScheme();
    }
  }

  private static class QueryProgressTupleScheme extends TupleScheme<QueryProgress> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryProgress struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.jobId.size());
        for (String _iter52 : struct.jobId)
        {
          oprot.writeString(_iter52);
        }
      }
      oprot.writeI32(struct.state);
      oprot.writeI32(struct.n);
      oprot.writeString(struct.engine);
      oprot.writeString(struct.errmsg);
      oprot.writeI64(struct.startTime);
      oprot.writeI64(struct.endTime);
      oprot.writeI64(struct.resSize);
      oprot.writeDouble(struct.progress);
      oprot.writeBool(struct.isFetchTask);
      BitSet optionals = new BitSet();
      if (struct.isSetRes()) {
        optionals.set(0);
      }
      if (struct.isSetFields()) {
        optionals.set(1);
      }
      if (struct.isSetFetchDirs()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRes()) {
        oprot.writeString(struct.res);
      }
      if (struct.isSetFields()) {
        {
          oprot.writeI32(struct.fields.size());
          for (Field _iter53 : struct.fields)
          {
            _iter53.write(oprot);
          }
        }
      }
      if (struct.isSetFetchDirs()) {
        {
          oprot.writeI32(struct.fetchDirs.size());
          for (String _iter54 : struct.fetchDirs)
          {
            oprot.writeString(_iter54);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryProgress struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.jobId = new ArrayList<String>(_list55.size);
        String _elem56;
        for (int _i57 = 0; _i57 < _list55.size; ++_i57)
        {
          _elem56 = iprot.readString();
          struct.jobId.add(_elem56);
        }
      }
      struct.setJobIdIsSet(true);
      struct.state = iprot.readI32();
      struct.setStateIsSet(true);
      struct.n = iprot.readI32();
      struct.setNIsSet(true);
      struct.engine = iprot.readString();
      struct.setEngineIsSet(true);
      struct.errmsg = iprot.readString();
      struct.setErrmsgIsSet(true);
      struct.startTime = iprot.readI64();
      struct.setStartTimeIsSet(true);
      struct.endTime = iprot.readI64();
      struct.setEndTimeIsSet(true);
      struct.resSize = iprot.readI64();
      struct.setResSizeIsSet(true);
      struct.progress = iprot.readDouble();
      struct.setProgressIsSet(true);
      struct.isFetchTask = iprot.readBool();
      struct.setIsFetchTaskIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.res = iprot.readString();
        struct.setResIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.fields = new ArrayList<Field>(_list58.size);
          Field _elem59;
          for (int _i60 = 0; _i60 < _list58.size; ++_i60)
          {
            _elem59 = new Field();
            _elem59.read(iprot);
            struct.fields.add(_elem59);
          }
        }
        struct.setFieldsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.fetchDirs = new ArrayList<String>(_list61.size);
          String _elem62;
          for (int _i63 = 0; _i63 < _list61.size; ++_i63)
          {
            _elem62 = iprot.readString();
            struct.fetchDirs.add(_elem62);
          }
        }
        struct.setFetchDirsIsSet(true);
      }
    }
  }

}

