/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hiido.hcat.thrift.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-23")
public class Handle implements org.apache.thrift.TBase<Handle, Handle._Fields>, java.io.Serializable, Cloneable, Comparable<Handle> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Handle");

  private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("queryId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField QUICK_FIELD_DESC = new org.apache.thrift.protocol.TField("quick", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField STDOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("stdout", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STDERR_FIELD_DESC = new org.apache.thrift.protocol.TField("stderr", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_N_FIELD_DESC = new org.apache.thrift.protocol.TField("totalN", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField RUNNING_FIELD_DESC = new org.apache.thrift.protocol.TField("running", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HandleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HandleTupleSchemeFactory());
  }

  public String queryId; // required
  public boolean quick; // required
  public String stdout; // optional
  public String stderr; // optional
  public int totalN; // required
  public boolean running; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY_ID((short)1, "queryId"),
    QUICK((short)2, "quick"),
    STDOUT((short)3, "stdout"),
    STDERR((short)4, "stderr"),
    TOTAL_N((short)5, "totalN"),
    RUNNING((short)6, "running");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY_ID
          return QUERY_ID;
        case 2: // QUICK
          return QUICK;
        case 3: // STDOUT
          return STDOUT;
        case 4: // STDERR
          return STDERR;
        case 5: // TOTAL_N
          return TOTAL_N;
        case 6: // RUNNING
          return RUNNING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUICK_ISSET_ID = 0;
  private static final int __TOTALN_ISSET_ID = 1;
  private static final int __RUNNING_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STDOUT,_Fields.STDERR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("queryId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUICK, new org.apache.thrift.meta_data.FieldMetaData("quick", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STDOUT, new org.apache.thrift.meta_data.FieldMetaData("stdout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STDERR, new org.apache.thrift.meta_data.FieldMetaData("stderr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_N, new org.apache.thrift.meta_data.FieldMetaData("totalN", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RUNNING, new org.apache.thrift.meta_data.FieldMetaData("running", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Handle.class, metaDataMap);
  }

  public Handle() {
    this.running = false;

  }

  public Handle(
    String queryId,
    boolean quick,
    int totalN,
    boolean running)
  {
    this();
    this.queryId = queryId;
    this.quick = quick;
    setQuickIsSet(true);
    this.totalN = totalN;
    setTotalNIsSet(true);
    this.running = running;
    setRunningIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Handle(Handle other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetQueryId()) {
      this.queryId = other.queryId;
    }
    this.quick = other.quick;
    if (other.isSetStdout()) {
      this.stdout = other.stdout;
    }
    if (other.isSetStderr()) {
      this.stderr = other.stderr;
    }
    this.totalN = other.totalN;
    this.running = other.running;
  }

  public Handle deepCopy() {
    return new Handle(this);
  }

  @Override
  public void clear() {
    this.queryId = null;
    setQuickIsSet(false);
    this.quick = false;
    this.stdout = null;
    this.stderr = null;
    setTotalNIsSet(false);
    this.totalN = 0;
    this.running = false;

  }

  public String getQueryId() {
    return this.queryId;
  }

  public Handle setQueryId(String queryId) {
    this.queryId = queryId;
    return this;
  }

  public void unsetQueryId() {
    this.queryId = null;
  }

  /** Returns true if field queryId is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryId() {
    return this.queryId != null;
  }

  public void setQueryIdIsSet(boolean value) {
    if (!value) {
      this.queryId = null;
    }
  }

  public boolean isQuick() {
    return this.quick;
  }

  public Handle setQuick(boolean quick) {
    this.quick = quick;
    setQuickIsSet(true);
    return this;
  }

  public void unsetQuick() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUICK_ISSET_ID);
  }

  /** Returns true if field quick is set (has been assigned a value) and false otherwise */
  public boolean isSetQuick() {
    return EncodingUtils.testBit(__isset_bitfield, __QUICK_ISSET_ID);
  }

  public void setQuickIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUICK_ISSET_ID, value);
  }

  public String getStdout() {
    return this.stdout;
  }

  public Handle setStdout(String stdout) {
    this.stdout = stdout;
    return this;
  }

  public void unsetStdout() {
    this.stdout = null;
  }

  /** Returns true if field stdout is set (has been assigned a value) and false otherwise */
  public boolean isSetStdout() {
    return this.stdout != null;
  }

  public void setStdoutIsSet(boolean value) {
    if (!value) {
      this.stdout = null;
    }
  }

  public String getStderr() {
    return this.stderr;
  }

  public Handle setStderr(String stderr) {
    this.stderr = stderr;
    return this;
  }

  public void unsetStderr() {
    this.stderr = null;
  }

  /** Returns true if field stderr is set (has been assigned a value) and false otherwise */
  public boolean isSetStderr() {
    return this.stderr != null;
  }

  public void setStderrIsSet(boolean value) {
    if (!value) {
      this.stderr = null;
    }
  }

  public int getTotalN() {
    return this.totalN;
  }

  public Handle setTotalN(int totalN) {
    this.totalN = totalN;
    setTotalNIsSet(true);
    return this;
  }

  public void unsetTotalN() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALN_ISSET_ID);
  }

  /** Returns true if field totalN is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalN() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALN_ISSET_ID);
  }

  public void setTotalNIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALN_ISSET_ID, value);
  }

  public boolean isRunning() {
    return this.running;
  }

  public Handle setRunning(boolean running) {
    this.running = running;
    setRunningIsSet(true);
    return this;
  }

  public void unsetRunning() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RUNNING_ISSET_ID);
  }

  /** Returns true if field running is set (has been assigned a value) and false otherwise */
  public boolean isSetRunning() {
    return EncodingUtils.testBit(__isset_bitfield, __RUNNING_ISSET_ID);
  }

  public void setRunningIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RUNNING_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY_ID:
      if (value == null) {
        unsetQueryId();
      } else {
        setQueryId((String)value);
      }
      break;

    case QUICK:
      if (value == null) {
        unsetQuick();
      } else {
        setQuick((Boolean)value);
      }
      break;

    case STDOUT:
      if (value == null) {
        unsetStdout();
      } else {
        setStdout((String)value);
      }
      break;

    case STDERR:
      if (value == null) {
        unsetStderr();
      } else {
        setStderr((String)value);
      }
      break;

    case TOTAL_N:
      if (value == null) {
        unsetTotalN();
      } else {
        setTotalN((Integer)value);
      }
      break;

    case RUNNING:
      if (value == null) {
        unsetRunning();
      } else {
        setRunning((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY_ID:
      return getQueryId();

    case QUICK:
      return isQuick();

    case STDOUT:
      return getStdout();

    case STDERR:
      return getStderr();

    case TOTAL_N:
      return getTotalN();

    case RUNNING:
      return isRunning();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY_ID:
      return isSetQueryId();
    case QUICK:
      return isSetQuick();
    case STDOUT:
      return isSetStdout();
    case STDERR:
      return isSetStderr();
    case TOTAL_N:
      return isSetTotalN();
    case RUNNING:
      return isSetRunning();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Handle)
      return this.equals((Handle)that);
    return false;
  }

  public boolean equals(Handle that) {
    if (that == null)
      return false;

    boolean this_present_queryId = true && this.isSetQueryId();
    boolean that_present_queryId = true && that.isSetQueryId();
    if (this_present_queryId || that_present_queryId) {
      if (!(this_present_queryId && that_present_queryId))
        return false;
      if (!this.queryId.equals(that.queryId))
        return false;
    }

    boolean this_present_quick = true;
    boolean that_present_quick = true;
    if (this_present_quick || that_present_quick) {
      if (!(this_present_quick && that_present_quick))
        return false;
      if (this.quick != that.quick)
        return false;
    }

    boolean this_present_stdout = true && this.isSetStdout();
    boolean that_present_stdout = true && that.isSetStdout();
    if (this_present_stdout || that_present_stdout) {
      if (!(this_present_stdout && that_present_stdout))
        return false;
      if (!this.stdout.equals(that.stdout))
        return false;
    }

    boolean this_present_stderr = true && this.isSetStderr();
    boolean that_present_stderr = true && that.isSetStderr();
    if (this_present_stderr || that_present_stderr) {
      if (!(this_present_stderr && that_present_stderr))
        return false;
      if (!this.stderr.equals(that.stderr))
        return false;
    }

    boolean this_present_totalN = true;
    boolean that_present_totalN = true;
    if (this_present_totalN || that_present_totalN) {
      if (!(this_present_totalN && that_present_totalN))
        return false;
      if (this.totalN != that.totalN)
        return false;
    }

    boolean this_present_running = true;
    boolean that_present_running = true;
    if (this_present_running || that_present_running) {
      if (!(this_present_running && that_present_running))
        return false;
      if (this.running != that.running)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_queryId = true && (isSetQueryId());
    list.add(present_queryId);
    if (present_queryId)
      list.add(queryId);

    boolean present_quick = true;
    list.add(present_quick);
    if (present_quick)
      list.add(quick);

    boolean present_stdout = true && (isSetStdout());
    list.add(present_stdout);
    if (present_stdout)
      list.add(stdout);

    boolean present_stderr = true && (isSetStderr());
    list.add(present_stderr);
    if (present_stderr)
      list.add(stderr);

    boolean present_totalN = true;
    list.add(present_totalN);
    if (present_totalN)
      list.add(totalN);

    boolean present_running = true;
    list.add(present_running);
    if (present_running)
      list.add(running);

    return list.hashCode();
  }

  @Override
  public int compareTo(Handle other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQueryId()).compareTo(other.isSetQueryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryId, other.queryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuick()).compareTo(other.isSetQuick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quick, other.quick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStdout()).compareTo(other.isSetStdout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStdout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stdout, other.stdout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStderr()).compareTo(other.isSetStderr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStderr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stderr, other.stderr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalN()).compareTo(other.isSetTotalN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalN, other.totalN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunning()).compareTo(other.isSetRunning());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunning()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.running, other.running);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Handle(");
    boolean first = true;

    sb.append("queryId:");
    if (this.queryId == null) {
      sb.append("null");
    } else {
      sb.append(this.queryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quick:");
    sb.append(this.quick);
    first = false;
    if (isSetStdout()) {
      if (!first) sb.append(", ");
      sb.append("stdout:");
      if (this.stdout == null) {
        sb.append("null");
      } else {
        sb.append(this.stdout);
      }
      first = false;
    }
    if (isSetStderr()) {
      if (!first) sb.append(", ");
      sb.append("stderr:");
      if (this.stderr == null) {
        sb.append("null");
      } else {
        sb.append(this.stderr);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("totalN:");
    sb.append(this.totalN);
    first = false;
    if (!first) sb.append(", ");
    sb.append("running:");
    sb.append(this.running);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (queryId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'queryId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'quick' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalN' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'running' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HandleStandardSchemeFactory implements SchemeFactory {
    public HandleStandardScheme getScheme() {
      return new HandleStandardScheme();
    }
  }

  private static class HandleStandardScheme extends StandardScheme<Handle> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Handle struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queryId = iprot.readString();
              struct.setQueryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUICK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.quick = iprot.readBool();
              struct.setQuickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STDOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stdout = iprot.readString();
              struct.setStdoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STDERR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stderr = iprot.readString();
              struct.setStderrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_N
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalN = iprot.readI32();
              struct.setTotalNIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RUNNING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.running = iprot.readBool();
              struct.setRunningIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetQuick()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'quick' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalN()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalN' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRunning()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'running' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Handle struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.queryId != null) {
        oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
        oprot.writeString(struct.queryId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUICK_FIELD_DESC);
      oprot.writeBool(struct.quick);
      oprot.writeFieldEnd();
      if (struct.stdout != null) {
        if (struct.isSetStdout()) {
          oprot.writeFieldBegin(STDOUT_FIELD_DESC);
          oprot.writeString(struct.stdout);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stderr != null) {
        if (struct.isSetStderr()) {
          oprot.writeFieldBegin(STDERR_FIELD_DESC);
          oprot.writeString(struct.stderr);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(TOTAL_N_FIELD_DESC);
      oprot.writeI32(struct.totalN);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RUNNING_FIELD_DESC);
      oprot.writeBool(struct.running);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HandleTupleSchemeFactory implements SchemeFactory {
    public HandleTupleScheme getScheme() {
      return new HandleTupleScheme();
    }
  }

  private static class HandleTupleScheme extends TupleScheme<Handle> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Handle struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.queryId);
      oprot.writeBool(struct.quick);
      oprot.writeI32(struct.totalN);
      oprot.writeBool(struct.running);
      BitSet optionals = new BitSet();
      if (struct.isSetStdout()) {
        optionals.set(0);
      }
      if (struct.isSetStderr()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetStdout()) {
        oprot.writeString(struct.stdout);
      }
      if (struct.isSetStderr()) {
        oprot.writeString(struct.stderr);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Handle struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.queryId = iprot.readString();
      struct.setQueryIdIsSet(true);
      struct.quick = iprot.readBool();
      struct.setQuickIsSet(true);
      struct.totalN = iprot.readI32();
      struct.setTotalNIsSet(true);
      struct.running = iprot.readBool();
      struct.setRunningIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.stdout = iprot.readString();
        struct.setStdoutIsSet(true);
      }
      if (incoming.get(1)) {
        struct.stderr = iprot.readString();
        struct.setStderrIsSet(true);
      }
    }
  }

}

