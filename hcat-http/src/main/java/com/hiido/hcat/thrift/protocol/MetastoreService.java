/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hiido.hcat.thrift.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-06-08")
public class MetastoreService {

  public interface Iface {

    public List<FieldInfo> getColumns(String dbname, String table) throws AuthorizationException, RuntimeException, NotFoundException, TException;

    public String getPartitionPath(String dbname, String table, Map<String, String> partitions) throws AuthorizationException, RuntimeException, NotFoundException, TException;

  }

  public interface AsyncIface {

    public void getColumns(String dbname, String table, AsyncMethodCallback resultHandler) throws TException;

    public void getPartitionPath(String dbname, String table, Map<String, String> partitions, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<FieldInfo> getColumns(String dbname, String table) throws AuthorizationException, RuntimeException, NotFoundException, TException
    {
      send_getColumns(dbname, table);
      return recv_getColumns();
    }

    public void send_getColumns(String dbname, String table) throws TException
    {
      getColumns_args args = new getColumns_args();
      args.setDbname(dbname);
      args.setTable(table);
      sendBase("getColumns", args);
    }

    public List<FieldInfo> recv_getColumns() throws AuthorizationException, RuntimeException, NotFoundException, TException
    {
      getColumns_result result = new getColumns_result();
      receiveBase(result, "getColumns");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.authException != null) {
        throw result.authException;
      }
      if (result.runTimeException != null) {
        throw result.runTimeException;
      }
      if (result.notfoundException != null) {
        throw result.notfoundException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getColumns failed: unknown result");
    }

    public String getPartitionPath(String dbname, String table, Map<String,String> partitions) throws AuthorizationException, RuntimeException, NotFoundException, TException
    {
      send_getPartitionPath(dbname, table, partitions);
      return recv_getPartitionPath();
    }

    public void send_getPartitionPath(String dbname, String table, Map<String,String> partitions) throws TException
    {
      getPartitionPath_args args = new getPartitionPath_args();
      args.setDbname(dbname);
      args.setTable(table);
      args.setPartitions(partitions);
      sendBase("getPartitionPath", args);
    }

    public String recv_getPartitionPath() throws AuthorizationException, RuntimeException, NotFoundException, TException
    {
      getPartitionPath_result result = new getPartitionPath_result();
      receiveBase(result, "getPartitionPath");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.authException != null) {
        throw result.authException;
      }
      if (result.runTimeException != null) {
        throw result.runTimeException;
      }
      if (result.notfoundException != null) {
        throw result.notfoundException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPartitionPath failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getColumns(String dbname, String table, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getColumns_call method_call = new getColumns_call(dbname, table, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getColumns_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String dbname;
      private String table;
      public getColumns_call(String dbname, String table, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dbname = dbname;
        this.table = table;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getColumns", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getColumns_args args = new getColumns_args();
        args.setDbname(dbname);
        args.setTable(table);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FieldInfo> getResult() throws AuthorizationException, RuntimeException, NotFoundException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getColumns();
      }
    }

    public void getPartitionPath(String dbname, String table, Map<String,String> partitions, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getPartitionPath_call method_call = new getPartitionPath_call(dbname, table, partitions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPartitionPath_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String dbname;
      private String table;
      private Map<String,String> partitions;
      public getPartitionPath_call(String dbname, String table, Map<String,String> partitions, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dbname = dbname;
        this.table = table;
        this.partitions = partitions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPartitionPath", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPartitionPath_args args = new getPartitionPath_args();
        args.setDbname(dbname);
        args.setTable(table);
        args.setPartitions(partitions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws AuthorizationException, RuntimeException, NotFoundException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPartitionPath();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getColumns", new getColumns());
      processMap.put("getPartitionPath", new getPartitionPath());
      return processMap;
    }

    public static class getColumns<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getColumns_args> {
      public getColumns() {
        super("getColumns");
      }

      public getColumns_args getEmptyArgsInstance() {
        return new getColumns_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getColumns_result getResult(I iface, getColumns_args args) throws TException {
        getColumns_result result = new getColumns_result();
        try {
          result.success = iface.getColumns(args.dbname, args.table);
        } catch (AuthorizationException authException) {
          result.authException = authException;
        } catch (RuntimeException runTimeException) {
          result.runTimeException = runTimeException;
        } catch (NotFoundException notfoundException) {
          result.notfoundException = notfoundException;
        }
        return result;
      }
    }

    public static class getPartitionPath<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPartitionPath_args> {
      public getPartitionPath() {
        super("getPartitionPath");
      }

      public getPartitionPath_args getEmptyArgsInstance() {
        return new getPartitionPath_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPartitionPath_result getResult(I iface, getPartitionPath_args args) throws TException {
        getPartitionPath_result result = new getPartitionPath_result();
        try {
          result.success = iface.getPartitionPath(args.dbname, args.table, args.partitions);
        } catch (AuthorizationException authException) {
          result.authException = authException;
        } catch (RuntimeException runTimeException) {
          result.runTimeException = runTimeException;
        } catch (NotFoundException notfoundException) {
          result.notfoundException = notfoundException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getColumns", new getColumns());
      processMap.put("getPartitionPath", new getPartitionPath());
      return processMap;
    }

    public static class getColumns<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getColumns_args, List<FieldInfo>> {
      public getColumns() {
        super("getColumns");
      }

      public getColumns_args getEmptyArgsInstance() {
        return new getColumns_args();
      }

      public AsyncMethodCallback<List<FieldInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FieldInfo>>() { 
          public void onComplete(List<FieldInfo> o) {
            getColumns_result result = new getColumns_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getColumns_result result = new getColumns_result();
            if (e instanceof AuthorizationException) {
                        result.authException = (AuthorizationException) e;
                        result.setAuthExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof RuntimeException) {
                        result.runTimeException = (RuntimeException) e;
                        result.setRunTimeExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof NotFoundException) {
                        result.notfoundException = (NotFoundException) e;
                        result.setNotfoundExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getColumns_args args, AsyncMethodCallback<List<FieldInfo>> resultHandler) throws TException {
        iface.getColumns(args.dbname, args.table,resultHandler);
      }
    }

    public static class getPartitionPath<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPartitionPath_args, String> {
      public getPartitionPath() {
        super("getPartitionPath");
      }

      public getPartitionPath_args getEmptyArgsInstance() {
        return new getPartitionPath_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getPartitionPath_result result = new getPartitionPath_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPartitionPath_result result = new getPartitionPath_result();
            if (e instanceof AuthorizationException) {
                        result.authException = (AuthorizationException) e;
                        result.setAuthExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof RuntimeException) {
                        result.runTimeException = (RuntimeException) e;
                        result.setRunTimeExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof NotFoundException) {
                        result.notfoundException = (NotFoundException) e;
                        result.setNotfoundExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPartitionPath_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getPartitionPath(args.dbname, args.table, args.partitions,resultHandler);
      }
    }

  }

  public static class getColumns_args implements org.apache.thrift.TBase<getColumns_args, getColumns_args._Fields>, java.io.Serializable, Cloneable, Comparable<getColumns_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getColumns_args");

    private static final org.apache.thrift.protocol.TField DBNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dbname", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getColumns_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getColumns_argsTupleSchemeFactory());
    }

    public String dbname; // required
    public String table; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBNAME((short)1, "dbname"),
      TABLE((short)2, "table");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DBNAME
            return DBNAME;
          case 2: // TABLE
            return TABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DBNAME, new org.apache.thrift.meta_data.FieldMetaData("dbname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getColumns_args.class, metaDataMap);
    }

    public getColumns_args() {
    }

    public getColumns_args(
      String dbname,
      String table)
    {
      this();
      this.dbname = dbname;
      this.table = table;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getColumns_args(getColumns_args other) {
      if (other.isSetDbname()) {
        this.dbname = other.dbname;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
    }

    public getColumns_args deepCopy() {
      return new getColumns_args(this);
    }

    @Override
    public void clear() {
      this.dbname = null;
      this.table = null;
    }

    public String getDbname() {
      return this.dbname;
    }

    public getColumns_args setDbname(String dbname) {
      this.dbname = dbname;
      return this;
    }

    public void unsetDbname() {
      this.dbname = null;
    }

    /** Returns true if field dbname is set (has been assigned a value) and false otherwise */
    public boolean isSetDbname() {
      return this.dbname != null;
    }

    public void setDbnameIsSet(boolean value) {
      if (!value) {
        this.dbname = null;
      }
    }

    public String getTable() {
      return this.table;
    }

    public getColumns_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DBNAME:
        if (value == null) {
          unsetDbname();
        } else {
          setDbname((String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DBNAME:
        return getDbname();

      case TABLE:
        return getTable();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DBNAME:
        return isSetDbname();
      case TABLE:
        return isSetTable();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getColumns_args)
        return this.equals((getColumns_args)that);
      return false;
    }

    public boolean equals(getColumns_args that) {
      if (that == null)
        return false;

      boolean this_present_dbname = true && this.isSetDbname();
      boolean that_present_dbname = true && that.isSetDbname();
      if (this_present_dbname || that_present_dbname) {
        if (!(this_present_dbname && that_present_dbname))
          return false;
        if (!this.dbname.equals(that.dbname))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dbname = true && (isSetDbname());
      list.add(present_dbname);
      if (present_dbname)
        list.add(dbname);

      boolean present_table = true && (isSetTable());
      list.add(present_table);
      if (present_table)
        list.add(table);

      return list.hashCode();
    }

    @Override
    public int compareTo(getColumns_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDbname()).compareTo(other.isSetDbname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbname, other.dbname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getColumns_args(");
      boolean first = true;

      sb.append("dbname:");
      if (this.dbname == null) {
        sb.append("null");
      } else {
        sb.append(this.dbname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getColumns_argsStandardSchemeFactory implements SchemeFactory {
      public getColumns_argsStandardScheme getScheme() {
        return new getColumns_argsStandardScheme();
      }
    }

    private static class getColumns_argsStandardScheme extends StandardScheme<getColumns_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getColumns_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DBNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dbname = iprot.readString();
                struct.setDbnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getColumns_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dbname != null) {
          oprot.writeFieldBegin(DBNAME_FIELD_DESC);
          oprot.writeString(struct.dbname);
          oprot.writeFieldEnd();
        }
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getColumns_argsTupleSchemeFactory implements SchemeFactory {
      public getColumns_argsTupleScheme getScheme() {
        return new getColumns_argsTupleScheme();
      }
    }

    private static class getColumns_argsTupleScheme extends TupleScheme<getColumns_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getColumns_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDbname()) {
          optionals.set(0);
        }
        if (struct.isSetTable()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDbname()) {
          oprot.writeString(struct.dbname);
        }
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getColumns_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dbname = iprot.readString();
          struct.setDbnameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
      }
    }

  }

  public static class getColumns_result implements org.apache.thrift.TBase<getColumns_result, getColumns_result._Fields>, java.io.Serializable, Cloneable, Comparable<getColumns_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getColumns_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AUTH_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RUN_TIME_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("runTimeException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NOTFOUND_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("notfoundException", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getColumns_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getColumns_resultTupleSchemeFactory());
    }

    public List<FieldInfo> success; // required
    public AuthorizationException authException; // required
    public RuntimeException runTimeException; // required
    public NotFoundException notfoundException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AUTH_EXCEPTION((short)1, "authException"),
      RUN_TIME_EXCEPTION((short)2, "runTimeException"),
      NOTFOUND_EXCEPTION((short)3, "notfoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AUTH_EXCEPTION
            return AUTH_EXCEPTION;
          case 2: // RUN_TIME_EXCEPTION
            return RUN_TIME_EXCEPTION;
          case 3: // NOTFOUND_EXCEPTION
            return NOTFOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FieldInfo.class))));
      tmpMap.put(_Fields.AUTH_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RUN_TIME_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("runTimeException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOTFOUND_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("notfoundException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getColumns_result.class, metaDataMap);
    }

    public getColumns_result() {
    }

    public getColumns_result(
      List<FieldInfo> success,
      AuthorizationException authException,
      RuntimeException runTimeException,
      NotFoundException notfoundException)
    {
      this();
      this.success = success;
      this.authException = authException;
      this.runTimeException = runTimeException;
      this.notfoundException = notfoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getColumns_result(getColumns_result other) {
      if (other.isSetSuccess()) {
        List<FieldInfo> __this__success = new ArrayList<FieldInfo>(other.success.size());
        for (FieldInfo other_element : other.success) {
          __this__success.add(new FieldInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAuthException()) {
        this.authException = new AuthorizationException(other.authException);
      }
      if (other.isSetRunTimeException()) {
        this.runTimeException = new RuntimeException(other.runTimeException);
      }
      if (other.isSetNotfoundException()) {
        this.notfoundException = new NotFoundException(other.notfoundException);
      }
    }

    public getColumns_result deepCopy() {
      return new getColumns_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.authException = null;
      this.runTimeException = null;
      this.notfoundException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FieldInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FieldInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<FieldInfo>();
      }
      this.success.add(elem);
    }

    public List<FieldInfo> getSuccess() {
      return this.success;
    }

    public getColumns_result setSuccess(List<FieldInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public AuthorizationException getAuthException() {
      return this.authException;
    }

    public getColumns_result setAuthException(AuthorizationException authException) {
      this.authException = authException;
      return this;
    }

    public void unsetAuthException() {
      this.authException = null;
    }

    /** Returns true if field authException is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthException() {
      return this.authException != null;
    }

    public void setAuthExceptionIsSet(boolean value) {
      if (!value) {
        this.authException = null;
      }
    }

    public RuntimeException getRunTimeException() {
      return this.runTimeException;
    }

    public getColumns_result setRunTimeException(RuntimeException runTimeException) {
      this.runTimeException = runTimeException;
      return this;
    }

    public void unsetRunTimeException() {
      this.runTimeException = null;
    }

    /** Returns true if field runTimeException is set (has been assigned a value) and false otherwise */
    public boolean isSetRunTimeException() {
      return this.runTimeException != null;
    }

    public void setRunTimeExceptionIsSet(boolean value) {
      if (!value) {
        this.runTimeException = null;
      }
    }

    public NotFoundException getNotfoundException() {
      return this.notfoundException;
    }

    public getColumns_result setNotfoundException(NotFoundException notfoundException) {
      this.notfoundException = notfoundException;
      return this;
    }

    public void unsetNotfoundException() {
      this.notfoundException = null;
    }

    /** Returns true if field notfoundException is set (has been assigned a value) and false otherwise */
    public boolean isSetNotfoundException() {
      return this.notfoundException != null;
    }

    public void setNotfoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notfoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FieldInfo>)value);
        }
        break;

      case AUTH_EXCEPTION:
        if (value == null) {
          unsetAuthException();
        } else {
          setAuthException((AuthorizationException)value);
        }
        break;

      case RUN_TIME_EXCEPTION:
        if (value == null) {
          unsetRunTimeException();
        } else {
          setRunTimeException((RuntimeException)value);
        }
        break;

      case NOTFOUND_EXCEPTION:
        if (value == null) {
          unsetNotfoundException();
        } else {
          setNotfoundException((NotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AUTH_EXCEPTION:
        return getAuthException();

      case RUN_TIME_EXCEPTION:
        return getRunTimeException();

      case NOTFOUND_EXCEPTION:
        return getNotfoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AUTH_EXCEPTION:
        return isSetAuthException();
      case RUN_TIME_EXCEPTION:
        return isSetRunTimeException();
      case NOTFOUND_EXCEPTION:
        return isSetNotfoundException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getColumns_result)
        return this.equals((getColumns_result)that);
      return false;
    }

    public boolean equals(getColumns_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_authException = true && this.isSetAuthException();
      boolean that_present_authException = true && that.isSetAuthException();
      if (this_present_authException || that_present_authException) {
        if (!(this_present_authException && that_present_authException))
          return false;
        if (!this.authException.equals(that.authException))
          return false;
      }

      boolean this_present_runTimeException = true && this.isSetRunTimeException();
      boolean that_present_runTimeException = true && that.isSetRunTimeException();
      if (this_present_runTimeException || that_present_runTimeException) {
        if (!(this_present_runTimeException && that_present_runTimeException))
          return false;
        if (!this.runTimeException.equals(that.runTimeException))
          return false;
      }

      boolean this_present_notfoundException = true && this.isSetNotfoundException();
      boolean that_present_notfoundException = true && that.isSetNotfoundException();
      if (this_present_notfoundException || that_present_notfoundException) {
        if (!(this_present_notfoundException && that_present_notfoundException))
          return false;
        if (!this.notfoundException.equals(that.notfoundException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_authException = true && (isSetAuthException());
      list.add(present_authException);
      if (present_authException)
        list.add(authException);

      boolean present_runTimeException = true && (isSetRunTimeException());
      list.add(present_runTimeException);
      if (present_runTimeException)
        list.add(runTimeException);

      boolean present_notfoundException = true && (isSetNotfoundException());
      list.add(present_notfoundException);
      if (present_notfoundException)
        list.add(notfoundException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getColumns_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthException()).compareTo(other.isSetAuthException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authException, other.authException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRunTimeException()).compareTo(other.isSetRunTimeException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRunTimeException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runTimeException, other.runTimeException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotfoundException()).compareTo(other.isSetNotfoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotfoundException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notfoundException, other.notfoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getColumns_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authException:");
      if (this.authException == null) {
        sb.append("null");
      } else {
        sb.append(this.authException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("runTimeException:");
      if (this.runTimeException == null) {
        sb.append("null");
      } else {
        sb.append(this.runTimeException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notfoundException:");
      if (this.notfoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notfoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getColumns_resultStandardSchemeFactory implements SchemeFactory {
      public getColumns_resultStandardScheme getScheme() {
        return new getColumns_resultStandardScheme();
      }
    }

    private static class getColumns_resultStandardScheme extends StandardScheme<getColumns_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getColumns_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<FieldInfo>(_list0.size);
                  FieldInfo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new FieldInfo();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AUTH_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authException = new AuthorizationException();
                struct.authException.read(iprot);
                struct.setAuthExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RUN_TIME_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.runTimeException = new RuntimeException();
                struct.runTimeException.read(iprot);
                struct.setRunTimeExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOTFOUND_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notfoundException = new NotFoundException();
                struct.notfoundException.read(iprot);
                struct.setNotfoundExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getColumns_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FieldInfo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.authException != null) {
          oprot.writeFieldBegin(AUTH_EXCEPTION_FIELD_DESC);
          struct.authException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.runTimeException != null) {
          oprot.writeFieldBegin(RUN_TIME_EXCEPTION_FIELD_DESC);
          struct.runTimeException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notfoundException != null) {
          oprot.writeFieldBegin(NOTFOUND_EXCEPTION_FIELD_DESC);
          struct.notfoundException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getColumns_resultTupleSchemeFactory implements SchemeFactory {
      public getColumns_resultTupleScheme getScheme() {
        return new getColumns_resultTupleScheme();
      }
    }

    private static class getColumns_resultTupleScheme extends TupleScheme<getColumns_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getColumns_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAuthException()) {
          optionals.set(1);
        }
        if (struct.isSetRunTimeException()) {
          optionals.set(2);
        }
        if (struct.isSetNotfoundException()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FieldInfo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetAuthException()) {
          struct.authException.write(oprot);
        }
        if (struct.isSetRunTimeException()) {
          struct.runTimeException.write(oprot);
        }
        if (struct.isSetNotfoundException()) {
          struct.notfoundException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getColumns_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FieldInfo>(_list5.size);
            FieldInfo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new FieldInfo();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.authException = new AuthorizationException();
          struct.authException.read(iprot);
          struct.setAuthExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.runTimeException = new RuntimeException();
          struct.runTimeException.read(iprot);
          struct.setRunTimeExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.notfoundException = new NotFoundException();
          struct.notfoundException.read(iprot);
          struct.setNotfoundExceptionIsSet(true);
        }
      }
    }

  }

  public static class getPartitionPath_args implements org.apache.thrift.TBase<getPartitionPath_args, getPartitionPath_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPartitionPath_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPartitionPath_args");

    private static final org.apache.thrift.protocol.TField DBNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dbname", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitions", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPartitionPath_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPartitionPath_argsTupleSchemeFactory());
    }

    public String dbname; // required
    public String table; // required
    public Map<String,String> partitions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBNAME((short)1, "dbname"),
      TABLE((short)2, "table"),
      PARTITIONS((short)3, "partitions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DBNAME
            return DBNAME;
          case 2: // TABLE
            return TABLE;
          case 3: // PARTITIONS
            return PARTITIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DBNAME, new org.apache.thrift.meta_data.FieldMetaData("dbname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("partitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPartitionPath_args.class, metaDataMap);
    }

    public getPartitionPath_args() {
    }

    public getPartitionPath_args(
      String dbname,
      String table,
      Map<String,String> partitions)
    {
      this();
      this.dbname = dbname;
      this.table = table;
      this.partitions = partitions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPartitionPath_args(getPartitionPath_args other) {
      if (other.isSetDbname()) {
        this.dbname = other.dbname;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetPartitions()) {
        Map<String,String> __this__partitions = new HashMap<String,String>(other.partitions);
        this.partitions = __this__partitions;
      }
    }

    public getPartitionPath_args deepCopy() {
      return new getPartitionPath_args(this);
    }

    @Override
    public void clear() {
      this.dbname = null;
      this.table = null;
      this.partitions = null;
    }

    public String getDbname() {
      return this.dbname;
    }

    public getPartitionPath_args setDbname(String dbname) {
      this.dbname = dbname;
      return this;
    }

    public void unsetDbname() {
      this.dbname = null;
    }

    /** Returns true if field dbname is set (has been assigned a value) and false otherwise */
    public boolean isSetDbname() {
      return this.dbname != null;
    }

    public void setDbnameIsSet(boolean value) {
      if (!value) {
        this.dbname = null;
      }
    }

    public String getTable() {
      return this.table;
    }

    public getPartitionPath_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public int getPartitionsSize() {
      return (this.partitions == null) ? 0 : this.partitions.size();
    }

    public void putToPartitions(String key, String val) {
      if (this.partitions == null) {
        this.partitions = new HashMap<String,String>();
      }
      this.partitions.put(key, val);
    }

    public Map<String,String> getPartitions() {
      return this.partitions;
    }

    public getPartitionPath_args setPartitions(Map<String,String> partitions) {
      this.partitions = partitions;
      return this;
    }

    public void unsetPartitions() {
      this.partitions = null;
    }

    /** Returns true if field partitions is set (has been assigned a value) and false otherwise */
    public boolean isSetPartitions() {
      return this.partitions != null;
    }

    public void setPartitionsIsSet(boolean value) {
      if (!value) {
        this.partitions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DBNAME:
        if (value == null) {
          unsetDbname();
        } else {
          setDbname((String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case PARTITIONS:
        if (value == null) {
          unsetPartitions();
        } else {
          setPartitions((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DBNAME:
        return getDbname();

      case TABLE:
        return getTable();

      case PARTITIONS:
        return getPartitions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DBNAME:
        return isSetDbname();
      case TABLE:
        return isSetTable();
      case PARTITIONS:
        return isSetPartitions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPartitionPath_args)
        return this.equals((getPartitionPath_args)that);
      return false;
    }

    public boolean equals(getPartitionPath_args that) {
      if (that == null)
        return false;

      boolean this_present_dbname = true && this.isSetDbname();
      boolean that_present_dbname = true && that.isSetDbname();
      if (this_present_dbname || that_present_dbname) {
        if (!(this_present_dbname && that_present_dbname))
          return false;
        if (!this.dbname.equals(that.dbname))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_partitions = true && this.isSetPartitions();
      boolean that_present_partitions = true && that.isSetPartitions();
      if (this_present_partitions || that_present_partitions) {
        if (!(this_present_partitions && that_present_partitions))
          return false;
        if (!this.partitions.equals(that.partitions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dbname = true && (isSetDbname());
      list.add(present_dbname);
      if (present_dbname)
        list.add(dbname);

      boolean present_table = true && (isSetTable());
      list.add(present_table);
      if (present_table)
        list.add(table);

      boolean present_partitions = true && (isSetPartitions());
      list.add(present_partitions);
      if (present_partitions)
        list.add(partitions);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPartitionPath_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDbname()).compareTo(other.isSetDbname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbname, other.dbname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartitions()).compareTo(other.isSetPartitions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartitions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitions, other.partitions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPartitionPath_args(");
      boolean first = true;

      sb.append("dbname:");
      if (this.dbname == null) {
        sb.append("null");
      } else {
        sb.append(this.dbname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partitions:");
      if (this.partitions == null) {
        sb.append("null");
      } else {
        sb.append(this.partitions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPartitionPath_argsStandardSchemeFactory implements SchemeFactory {
      public getPartitionPath_argsStandardScheme getScheme() {
        return new getPartitionPath_argsStandardScheme();
      }
    }

    private static class getPartitionPath_argsStandardScheme extends StandardScheme<getPartitionPath_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPartitionPath_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DBNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dbname = iprot.readString();
                struct.setDbnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARTITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                  struct.partitions = new HashMap<String,String>(2*_map8.size);
                  String _key9;
                  String _val10;
                  for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                  {
                    _key9 = iprot.readString();
                    _val10 = iprot.readString();
                    struct.partitions.put(_key9, _val10);
                  }
                  iprot.readMapEnd();
                }
                struct.setPartitionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPartitionPath_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dbname != null) {
          oprot.writeFieldBegin(DBNAME_FIELD_DESC);
          oprot.writeString(struct.dbname);
          oprot.writeFieldEnd();
        }
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.partitions != null) {
          oprot.writeFieldBegin(PARTITIONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.partitions.size()));
            for (Map.Entry<String, String> _iter12 : struct.partitions.entrySet())
            {
              oprot.writeString(_iter12.getKey());
              oprot.writeString(_iter12.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPartitionPath_argsTupleSchemeFactory implements SchemeFactory {
      public getPartitionPath_argsTupleScheme getScheme() {
        return new getPartitionPath_argsTupleScheme();
      }
    }

    private static class getPartitionPath_argsTupleScheme extends TupleScheme<getPartitionPath_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPartitionPath_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDbname()) {
          optionals.set(0);
        }
        if (struct.isSetTable()) {
          optionals.set(1);
        }
        if (struct.isSetPartitions()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDbname()) {
          oprot.writeString(struct.dbname);
        }
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetPartitions()) {
          {
            oprot.writeI32(struct.partitions.size());
            for (Map.Entry<String, String> _iter13 : struct.partitions.entrySet())
            {
              oprot.writeString(_iter13.getKey());
              oprot.writeString(_iter13.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPartitionPath_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.dbname = iprot.readString();
          struct.setDbnameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.partitions = new HashMap<String,String>(2*_map14.size);
            String _key15;
            String _val16;
            for (int _i17 = 0; _i17 < _map14.size; ++_i17)
            {
              _key15 = iprot.readString();
              _val16 = iprot.readString();
              struct.partitions.put(_key15, _val16);
            }
          }
          struct.setPartitionsIsSet(true);
        }
      }
    }

  }

  public static class getPartitionPath_result implements org.apache.thrift.TBase<getPartitionPath_result, getPartitionPath_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPartitionPath_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPartitionPath_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField AUTH_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RUN_TIME_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("runTimeException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NOTFOUND_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("notfoundException", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPartitionPath_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPartitionPath_resultTupleSchemeFactory());
    }

    public String success; // required
    public AuthorizationException authException; // required
    public RuntimeException runTimeException; // required
    public NotFoundException notfoundException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AUTH_EXCEPTION((short)1, "authException"),
      RUN_TIME_EXCEPTION((short)2, "runTimeException"),
      NOTFOUND_EXCEPTION((short)3, "notfoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AUTH_EXCEPTION
            return AUTH_EXCEPTION;
          case 2: // RUN_TIME_EXCEPTION
            return RUN_TIME_EXCEPTION;
          case 3: // NOTFOUND_EXCEPTION
            return NOTFOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTH_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RUN_TIME_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("runTimeException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOTFOUND_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("notfoundException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPartitionPath_result.class, metaDataMap);
    }

    public getPartitionPath_result() {
    }

    public getPartitionPath_result(
      String success,
      AuthorizationException authException,
      RuntimeException runTimeException,
      NotFoundException notfoundException)
    {
      this();
      this.success = success;
      this.authException = authException;
      this.runTimeException = runTimeException;
      this.notfoundException = notfoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPartitionPath_result(getPartitionPath_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetAuthException()) {
        this.authException = new AuthorizationException(other.authException);
      }
      if (other.isSetRunTimeException()) {
        this.runTimeException = new RuntimeException(other.runTimeException);
      }
      if (other.isSetNotfoundException()) {
        this.notfoundException = new NotFoundException(other.notfoundException);
      }
    }

    public getPartitionPath_result deepCopy() {
      return new getPartitionPath_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.authException = null;
      this.runTimeException = null;
      this.notfoundException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getPartitionPath_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public AuthorizationException getAuthException() {
      return this.authException;
    }

    public getPartitionPath_result setAuthException(AuthorizationException authException) {
      this.authException = authException;
      return this;
    }

    public void unsetAuthException() {
      this.authException = null;
    }

    /** Returns true if field authException is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthException() {
      return this.authException != null;
    }

    public void setAuthExceptionIsSet(boolean value) {
      if (!value) {
        this.authException = null;
      }
    }

    public RuntimeException getRunTimeException() {
      return this.runTimeException;
    }

    public getPartitionPath_result setRunTimeException(RuntimeException runTimeException) {
      this.runTimeException = runTimeException;
      return this;
    }

    public void unsetRunTimeException() {
      this.runTimeException = null;
    }

    /** Returns true if field runTimeException is set (has been assigned a value) and false otherwise */
    public boolean isSetRunTimeException() {
      return this.runTimeException != null;
    }

    public void setRunTimeExceptionIsSet(boolean value) {
      if (!value) {
        this.runTimeException = null;
      }
    }

    public NotFoundException getNotfoundException() {
      return this.notfoundException;
    }

    public getPartitionPath_result setNotfoundException(NotFoundException notfoundException) {
      this.notfoundException = notfoundException;
      return this;
    }

    public void unsetNotfoundException() {
      this.notfoundException = null;
    }

    /** Returns true if field notfoundException is set (has been assigned a value) and false otherwise */
    public boolean isSetNotfoundException() {
      return this.notfoundException != null;
    }

    public void setNotfoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notfoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case AUTH_EXCEPTION:
        if (value == null) {
          unsetAuthException();
        } else {
          setAuthException((AuthorizationException)value);
        }
        break;

      case RUN_TIME_EXCEPTION:
        if (value == null) {
          unsetRunTimeException();
        } else {
          setRunTimeException((RuntimeException)value);
        }
        break;

      case NOTFOUND_EXCEPTION:
        if (value == null) {
          unsetNotfoundException();
        } else {
          setNotfoundException((NotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AUTH_EXCEPTION:
        return getAuthException();

      case RUN_TIME_EXCEPTION:
        return getRunTimeException();

      case NOTFOUND_EXCEPTION:
        return getNotfoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AUTH_EXCEPTION:
        return isSetAuthException();
      case RUN_TIME_EXCEPTION:
        return isSetRunTimeException();
      case NOTFOUND_EXCEPTION:
        return isSetNotfoundException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPartitionPath_result)
        return this.equals((getPartitionPath_result)that);
      return false;
    }

    public boolean equals(getPartitionPath_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_authException = true && this.isSetAuthException();
      boolean that_present_authException = true && that.isSetAuthException();
      if (this_present_authException || that_present_authException) {
        if (!(this_present_authException && that_present_authException))
          return false;
        if (!this.authException.equals(that.authException))
          return false;
      }

      boolean this_present_runTimeException = true && this.isSetRunTimeException();
      boolean that_present_runTimeException = true && that.isSetRunTimeException();
      if (this_present_runTimeException || that_present_runTimeException) {
        if (!(this_present_runTimeException && that_present_runTimeException))
          return false;
        if (!this.runTimeException.equals(that.runTimeException))
          return false;
      }

      boolean this_present_notfoundException = true && this.isSetNotfoundException();
      boolean that_present_notfoundException = true && that.isSetNotfoundException();
      if (this_present_notfoundException || that_present_notfoundException) {
        if (!(this_present_notfoundException && that_present_notfoundException))
          return false;
        if (!this.notfoundException.equals(that.notfoundException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_authException = true && (isSetAuthException());
      list.add(present_authException);
      if (present_authException)
        list.add(authException);

      boolean present_runTimeException = true && (isSetRunTimeException());
      list.add(present_runTimeException);
      if (present_runTimeException)
        list.add(runTimeException);

      boolean present_notfoundException = true && (isSetNotfoundException());
      list.add(present_notfoundException);
      if (present_notfoundException)
        list.add(notfoundException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPartitionPath_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthException()).compareTo(other.isSetAuthException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authException, other.authException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRunTimeException()).compareTo(other.isSetRunTimeException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRunTimeException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runTimeException, other.runTimeException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotfoundException()).compareTo(other.isSetNotfoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotfoundException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notfoundException, other.notfoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPartitionPath_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authException:");
      if (this.authException == null) {
        sb.append("null");
      } else {
        sb.append(this.authException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("runTimeException:");
      if (this.runTimeException == null) {
        sb.append("null");
      } else {
        sb.append(this.runTimeException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notfoundException:");
      if (this.notfoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notfoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPartitionPath_resultStandardSchemeFactory implements SchemeFactory {
      public getPartitionPath_resultStandardScheme getScheme() {
        return new getPartitionPath_resultStandardScheme();
      }
    }

    private static class getPartitionPath_resultStandardScheme extends StandardScheme<getPartitionPath_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPartitionPath_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AUTH_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authException = new AuthorizationException();
                struct.authException.read(iprot);
                struct.setAuthExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RUN_TIME_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.runTimeException = new RuntimeException();
                struct.runTimeException.read(iprot);
                struct.setRunTimeExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOTFOUND_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notfoundException = new NotFoundException();
                struct.notfoundException.read(iprot);
                struct.setNotfoundExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPartitionPath_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.authException != null) {
          oprot.writeFieldBegin(AUTH_EXCEPTION_FIELD_DESC);
          struct.authException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.runTimeException != null) {
          oprot.writeFieldBegin(RUN_TIME_EXCEPTION_FIELD_DESC);
          struct.runTimeException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notfoundException != null) {
          oprot.writeFieldBegin(NOTFOUND_EXCEPTION_FIELD_DESC);
          struct.notfoundException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPartitionPath_resultTupleSchemeFactory implements SchemeFactory {
      public getPartitionPath_resultTupleScheme getScheme() {
        return new getPartitionPath_resultTupleScheme();
      }
    }

    private static class getPartitionPath_resultTupleScheme extends TupleScheme<getPartitionPath_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPartitionPath_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAuthException()) {
          optionals.set(1);
        }
        if (struct.isSetRunTimeException()) {
          optionals.set(2);
        }
        if (struct.isSetNotfoundException()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetAuthException()) {
          struct.authException.write(oprot);
        }
        if (struct.isSetRunTimeException()) {
          struct.runTimeException.write(oprot);
        }
        if (struct.isSetNotfoundException()) {
          struct.notfoundException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPartitionPath_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.authException = new AuthorizationException();
          struct.authException.read(iprot);
          struct.setAuthExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.runTimeException = new RuntimeException();
          struct.runTimeException.read(iprot);
          struct.setRunTimeExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.notfoundException = new NotFoundException();
          struct.notfoundException.read(iprot);
          struct.setNotfoundExceptionIsSet(true);
        }
      }
    }

  }

}
