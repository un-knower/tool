/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hiido.hcat.thrift.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-23")
public class CliService {

  public interface Iface {

    public CommitQueryReply commit(CommitQuery cq) throws AuthorizationException, RuntimeException, org.apache.thrift.TException;

    public QueryStatusReply queryJobStatus(QueryStatus qs) throws NotFoundException, org.apache.thrift.TException;

    public CancelQueryReply cancelJob(CancelQuery cq) throws AuthorizationException, NotFoundException, org.apache.thrift.TException;

    public LoadFileReply laodData(LoadFile lf) throws AuthorizationException, RuntimeException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void commit(CommitQuery cq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryJobStatus(QueryStatus qs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelJob(CancelQuery cq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void laodData(LoadFile lf, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public CommitQueryReply commit(CommitQuery cq) throws AuthorizationException, RuntimeException, org.apache.thrift.TException
    {
      send_commit(cq);
      return recv_commit();
    }

    public void send_commit(CommitQuery cq) throws org.apache.thrift.TException
    {
      commit_args args = new commit_args();
      args.setCq(cq);
      sendBase("commit", args);
    }

    public CommitQueryReply recv_commit() throws AuthorizationException, RuntimeException, org.apache.thrift.TException
    {
      commit_result result = new commit_result();
      receiveBase(result, "commit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.authException != null) {
        throw result.authException;
      }
      if (result.runTimeException != null) {
        throw result.runTimeException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "commit failed: unknown result");
    }

    public QueryStatusReply queryJobStatus(QueryStatus qs) throws NotFoundException, org.apache.thrift.TException
    {
      send_queryJobStatus(qs);
      return recv_queryJobStatus();
    }

    public void send_queryJobStatus(QueryStatus qs) throws org.apache.thrift.TException
    {
      queryJobStatus_args args = new queryJobStatus_args();
      args.setQs(qs);
      sendBase("queryJobStatus", args);
    }

    public QueryStatusReply recv_queryJobStatus() throws NotFoundException, org.apache.thrift.TException
    {
      queryJobStatus_result result = new queryJobStatus_result();
      receiveBase(result, "queryJobStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryJobStatus failed: unknown result");
    }

    public CancelQueryReply cancelJob(CancelQuery cq) throws AuthorizationException, NotFoundException, org.apache.thrift.TException
    {
      send_cancelJob(cq);
      return recv_cancelJob();
    }

    public void send_cancelJob(CancelQuery cq) throws org.apache.thrift.TException
    {
      cancelJob_args args = new cancelJob_args();
      args.setCq(cq);
      sendBase("cancelJob", args);
    }

    public CancelQueryReply recv_cancelJob() throws AuthorizationException, NotFoundException, org.apache.thrift.TException
    {
      cancelJob_result result = new cancelJob_result();
      receiveBase(result, "cancelJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.authException != null) {
        throw result.authException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelJob failed: unknown result");
    }

    public LoadFileReply laodData(LoadFile lf) throws AuthorizationException, RuntimeException, org.apache.thrift.TException
    {
      send_laodData(lf);
      return recv_laodData();
    }

    public void send_laodData(LoadFile lf) throws org.apache.thrift.TException
    {
      laodData_args args = new laodData_args();
      args.setLf(lf);
      sendBase("laodData", args);
    }

    public LoadFileReply recv_laodData() throws AuthorizationException, RuntimeException, org.apache.thrift.TException
    {
      laodData_result result = new laodData_result();
      receiveBase(result, "laodData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.authException != null) {
        throw result.authException;
      }
      if (result.runTimeException != null) {
        throw result.runTimeException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "laodData failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void commit(CommitQuery cq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      commit_call method_call = new commit_call(cq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class commit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CommitQuery cq;
      public commit_call(CommitQuery cq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cq = cq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("commit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        commit_args args = new commit_args();
        args.setCq(cq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CommitQueryReply getResult() throws AuthorizationException, RuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_commit();
      }
    }

    public void queryJobStatus(QueryStatus qs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryJobStatus_call method_call = new queryJobStatus_call(qs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryJobStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private QueryStatus qs;
      public queryJobStatus_call(QueryStatus qs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.qs = qs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryJobStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryJobStatus_args args = new queryJobStatus_args();
        args.setQs(qs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public QueryStatusReply getResult() throws NotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryJobStatus();
      }
    }

    public void cancelJob(CancelQuery cq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelJob_call method_call = new cancelJob_call(cq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelJob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CancelQuery cq;
      public cancelJob_call(CancelQuery cq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cq = cq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelJob_args args = new cancelJob_args();
        args.setCq(cq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CancelQueryReply getResult() throws AuthorizationException, NotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelJob();
      }
    }

    public void laodData(LoadFile lf, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      laodData_call method_call = new laodData_call(lf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class laodData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LoadFile lf;
      public laodData_call(LoadFile lf, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lf = lf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("laodData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        laodData_args args = new laodData_args();
        args.setLf(lf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LoadFileReply getResult() throws AuthorizationException, RuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_laodData();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("commit", new commit());
      processMap.put("queryJobStatus", new queryJobStatus());
      processMap.put("cancelJob", new cancelJob());
      processMap.put("laodData", new laodData());
      return processMap;
    }

    public static class commit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, commit_args> {
      public commit() {
        super("commit");
      }

      public commit_args getEmptyArgsInstance() {
        return new commit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public commit_result getResult(I iface, commit_args args) throws org.apache.thrift.TException {
        commit_result result = new commit_result();
        try {
          result.success = iface.commit(args.cq);
        } catch (AuthorizationException authException) {
          result.authException = authException;
        } catch (RuntimeException runTimeException) {
          result.runTimeException = runTimeException;
        }
        return result;
      }
    }

    public static class queryJobStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryJobStatus_args> {
      public queryJobStatus() {
        super("queryJobStatus");
      }

      public queryJobStatus_args getEmptyArgsInstance() {
        return new queryJobStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryJobStatus_result getResult(I iface, queryJobStatus_args args) throws org.apache.thrift.TException {
        queryJobStatus_result result = new queryJobStatus_result();
        try {
          result.success = iface.queryJobStatus(args.qs);
        } catch (NotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        }
        return result;
      }
    }

    public static class cancelJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelJob_args> {
      public cancelJob() {
        super("cancelJob");
      }

      public cancelJob_args getEmptyArgsInstance() {
        return new cancelJob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelJob_result getResult(I iface, cancelJob_args args) throws org.apache.thrift.TException {
        cancelJob_result result = new cancelJob_result();
        try {
          result.success = iface.cancelJob(args.cq);
        } catch (AuthorizationException authException) {
          result.authException = authException;
        } catch (NotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        }
        return result;
      }
    }

    public static class laodData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, laodData_args> {
      public laodData() {
        super("laodData");
      }

      public laodData_args getEmptyArgsInstance() {
        return new laodData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public laodData_result getResult(I iface, laodData_args args) throws org.apache.thrift.TException {
        laodData_result result = new laodData_result();
        try {
          result.success = iface.laodData(args.lf);
        } catch (AuthorizationException authException) {
          result.authException = authException;
        } catch (RuntimeException runTimeException) {
          result.runTimeException = runTimeException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("commit", new commit());
      processMap.put("queryJobStatus", new queryJobStatus());
      processMap.put("cancelJob", new cancelJob());
      processMap.put("laodData", new laodData());
      return processMap;
    }

    public static class commit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, commit_args, CommitQueryReply> {
      public commit() {
        super("commit");
      }

      public commit_args getEmptyArgsInstance() {
        return new commit_args();
      }

      public AsyncMethodCallback<CommitQueryReply> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CommitQueryReply>() { 
          public void onComplete(CommitQueryReply o) {
            commit_result result = new commit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            commit_result result = new commit_result();
            if (e instanceof AuthorizationException) {
                        result.authException = (AuthorizationException) e;
                        result.setAuthExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof RuntimeException) {
                        result.runTimeException = (RuntimeException) e;
                        result.setRunTimeExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, commit_args args, org.apache.thrift.async.AsyncMethodCallback<CommitQueryReply> resultHandler) throws TException {
        iface.commit(args.cq,resultHandler);
      }
    }

    public static class queryJobStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryJobStatus_args, QueryStatusReply> {
      public queryJobStatus() {
        super("queryJobStatus");
      }

      public queryJobStatus_args getEmptyArgsInstance() {
        return new queryJobStatus_args();
      }

      public AsyncMethodCallback<QueryStatusReply> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<QueryStatusReply>() { 
          public void onComplete(QueryStatusReply o) {
            queryJobStatus_result result = new queryJobStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryJobStatus_result result = new queryJobStatus_result();
            if (e instanceof NotFoundException) {
                        result.notFoundException = (NotFoundException) e;
                        result.setNotFoundExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryJobStatus_args args, org.apache.thrift.async.AsyncMethodCallback<QueryStatusReply> resultHandler) throws TException {
        iface.queryJobStatus(args.qs,resultHandler);
      }
    }

    public static class cancelJob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelJob_args, CancelQueryReply> {
      public cancelJob() {
        super("cancelJob");
      }

      public cancelJob_args getEmptyArgsInstance() {
        return new cancelJob_args();
      }

      public AsyncMethodCallback<CancelQueryReply> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CancelQueryReply>() { 
          public void onComplete(CancelQueryReply o) {
            cancelJob_result result = new cancelJob_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelJob_result result = new cancelJob_result();
            if (e instanceof AuthorizationException) {
                        result.authException = (AuthorizationException) e;
                        result.setAuthExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof NotFoundException) {
                        result.notFoundException = (NotFoundException) e;
                        result.setNotFoundExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelJob_args args, org.apache.thrift.async.AsyncMethodCallback<CancelQueryReply> resultHandler) throws TException {
        iface.cancelJob(args.cq,resultHandler);
      }
    }

    public static class laodData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, laodData_args, LoadFileReply> {
      public laodData() {
        super("laodData");
      }

      public laodData_args getEmptyArgsInstance() {
        return new laodData_args();
      }

      public AsyncMethodCallback<LoadFileReply> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<LoadFileReply>() { 
          public void onComplete(LoadFileReply o) {
            laodData_result result = new laodData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            laodData_result result = new laodData_result();
            if (e instanceof AuthorizationException) {
                        result.authException = (AuthorizationException) e;
                        result.setAuthExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof RuntimeException) {
                        result.runTimeException = (RuntimeException) e;
                        result.setRunTimeExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, laodData_args args, org.apache.thrift.async.AsyncMethodCallback<LoadFileReply> resultHandler) throws TException {
        iface.laodData(args.lf,resultHandler);
      }
    }

  }

  public static class commit_args implements org.apache.thrift.TBase<commit_args, commit_args._Fields>, java.io.Serializable, Cloneable, Comparable<commit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commit_args");

    private static final org.apache.thrift.protocol.TField CQ_FIELD_DESC = new org.apache.thrift.protocol.TField("cq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new commit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new commit_argsTupleSchemeFactory());
    }

    public CommitQuery cq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CQ((short)1, "cq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CQ
            return CQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CQ, new org.apache.thrift.meta_data.FieldMetaData("cq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommitQuery.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commit_args.class, metaDataMap);
    }

    public commit_args() {
    }

    public commit_args(
      CommitQuery cq)
    {
      this();
      this.cq = cq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commit_args(commit_args other) {
      if (other.isSetCq()) {
        this.cq = new CommitQuery(other.cq);
      }
    }

    public commit_args deepCopy() {
      return new commit_args(this);
    }

    @Override
    public void clear() {
      this.cq = null;
    }

    public CommitQuery getCq() {
      return this.cq;
    }

    public commit_args setCq(CommitQuery cq) {
      this.cq = cq;
      return this;
    }

    public void unsetCq() {
      this.cq = null;
    }

    /** Returns true if field cq is set (has been assigned a value) and false otherwise */
    public boolean isSetCq() {
      return this.cq != null;
    }

    public void setCqIsSet(boolean value) {
      if (!value) {
        this.cq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CQ:
        if (value == null) {
          unsetCq();
        } else {
          setCq((CommitQuery)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CQ:
        return getCq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CQ:
        return isSetCq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commit_args)
        return this.equals((commit_args)that);
      return false;
    }

    public boolean equals(commit_args that) {
      if (that == null)
        return false;

      boolean this_present_cq = true && this.isSetCq();
      boolean that_present_cq = true && that.isSetCq();
      if (this_present_cq || that_present_cq) {
        if (!(this_present_cq && that_present_cq))
          return false;
        if (!this.cq.equals(that.cq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cq = true && (isSetCq());
      list.add(present_cq);
      if (present_cq)
        list.add(cq);

      return list.hashCode();
    }

    @Override
    public int compareTo(commit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCq()).compareTo(other.isSetCq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cq, other.cq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("commit_args(");
      boolean first = true;

      sb.append("cq:");
      if (this.cq == null) {
        sb.append("null");
      } else {
        sb.append(this.cq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cq != null) {
        cq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class commit_argsStandardSchemeFactory implements SchemeFactory {
      public commit_argsStandardScheme getScheme() {
        return new commit_argsStandardScheme();
      }
    }

    private static class commit_argsStandardScheme extends StandardScheme<commit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, commit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cq = new CommitQuery();
                struct.cq.read(iprot);
                struct.setCqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, commit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cq != null) {
          oprot.writeFieldBegin(CQ_FIELD_DESC);
          struct.cq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class commit_argsTupleSchemeFactory implements SchemeFactory {
      public commit_argsTupleScheme getScheme() {
        return new commit_argsTupleScheme();
      }
    }

    private static class commit_argsTupleScheme extends TupleScheme<commit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCq()) {
          struct.cq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cq = new CommitQuery();
          struct.cq.read(iprot);
          struct.setCqIsSet(true);
        }
      }
    }

  }

  public static class commit_result implements org.apache.thrift.TBase<commit_result, commit_result._Fields>, java.io.Serializable, Cloneable, Comparable<commit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AUTH_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RUN_TIME_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("runTimeException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new commit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new commit_resultTupleSchemeFactory());
    }

    public CommitQueryReply success; // required
    public AuthorizationException authException; // required
    public RuntimeException runTimeException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AUTH_EXCEPTION((short)1, "authException"),
      RUN_TIME_EXCEPTION((short)2, "runTimeException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AUTH_EXCEPTION
            return AUTH_EXCEPTION;
          case 2: // RUN_TIME_EXCEPTION
            return RUN_TIME_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommitQueryReply.class)));
      tmpMap.put(_Fields.AUTH_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RUN_TIME_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("runTimeException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commit_result.class, metaDataMap);
    }

    public commit_result() {
    }

    public commit_result(
      CommitQueryReply success,
      AuthorizationException authException,
      RuntimeException runTimeException)
    {
      this();
      this.success = success;
      this.authException = authException;
      this.runTimeException = runTimeException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commit_result(commit_result other) {
      if (other.isSetSuccess()) {
        this.success = new CommitQueryReply(other.success);
      }
      if (other.isSetAuthException()) {
        this.authException = new AuthorizationException(other.authException);
      }
      if (other.isSetRunTimeException()) {
        this.runTimeException = new RuntimeException(other.runTimeException);
      }
    }

    public commit_result deepCopy() {
      return new commit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.authException = null;
      this.runTimeException = null;
    }

    public CommitQueryReply getSuccess() {
      return this.success;
    }

    public commit_result setSuccess(CommitQueryReply success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public AuthorizationException getAuthException() {
      return this.authException;
    }

    public commit_result setAuthException(AuthorizationException authException) {
      this.authException = authException;
      return this;
    }

    public void unsetAuthException() {
      this.authException = null;
    }

    /** Returns true if field authException is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthException() {
      return this.authException != null;
    }

    public void setAuthExceptionIsSet(boolean value) {
      if (!value) {
        this.authException = null;
      }
    }

    public RuntimeException getRunTimeException() {
      return this.runTimeException;
    }

    public commit_result setRunTimeException(RuntimeException runTimeException) {
      this.runTimeException = runTimeException;
      return this;
    }

    public void unsetRunTimeException() {
      this.runTimeException = null;
    }

    /** Returns true if field runTimeException is set (has been assigned a value) and false otherwise */
    public boolean isSetRunTimeException() {
      return this.runTimeException != null;
    }

    public void setRunTimeExceptionIsSet(boolean value) {
      if (!value) {
        this.runTimeException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CommitQueryReply)value);
        }
        break;

      case AUTH_EXCEPTION:
        if (value == null) {
          unsetAuthException();
        } else {
          setAuthException((AuthorizationException)value);
        }
        break;

      case RUN_TIME_EXCEPTION:
        if (value == null) {
          unsetRunTimeException();
        } else {
          setRunTimeException((RuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AUTH_EXCEPTION:
        return getAuthException();

      case RUN_TIME_EXCEPTION:
        return getRunTimeException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AUTH_EXCEPTION:
        return isSetAuthException();
      case RUN_TIME_EXCEPTION:
        return isSetRunTimeException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commit_result)
        return this.equals((commit_result)that);
      return false;
    }

    public boolean equals(commit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_authException = true && this.isSetAuthException();
      boolean that_present_authException = true && that.isSetAuthException();
      if (this_present_authException || that_present_authException) {
        if (!(this_present_authException && that_present_authException))
          return false;
        if (!this.authException.equals(that.authException))
          return false;
      }

      boolean this_present_runTimeException = true && this.isSetRunTimeException();
      boolean that_present_runTimeException = true && that.isSetRunTimeException();
      if (this_present_runTimeException || that_present_runTimeException) {
        if (!(this_present_runTimeException && that_present_runTimeException))
          return false;
        if (!this.runTimeException.equals(that.runTimeException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_authException = true && (isSetAuthException());
      list.add(present_authException);
      if (present_authException)
        list.add(authException);

      boolean present_runTimeException = true && (isSetRunTimeException());
      list.add(present_runTimeException);
      if (present_runTimeException)
        list.add(runTimeException);

      return list.hashCode();
    }

    @Override
    public int compareTo(commit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthException()).compareTo(other.isSetAuthException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authException, other.authException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRunTimeException()).compareTo(other.isSetRunTimeException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRunTimeException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runTimeException, other.runTimeException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("commit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authException:");
      if (this.authException == null) {
        sb.append("null");
      } else {
        sb.append(this.authException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("runTimeException:");
      if (this.runTimeException == null) {
        sb.append("null");
      } else {
        sb.append(this.runTimeException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class commit_resultStandardSchemeFactory implements SchemeFactory {
      public commit_resultStandardScheme getScheme() {
        return new commit_resultStandardScheme();
      }
    }

    private static class commit_resultStandardScheme extends StandardScheme<commit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, commit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CommitQueryReply();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AUTH_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authException = new AuthorizationException();
                struct.authException.read(iprot);
                struct.setAuthExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RUN_TIME_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.runTimeException = new RuntimeException();
                struct.runTimeException.read(iprot);
                struct.setRunTimeExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, commit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authException != null) {
          oprot.writeFieldBegin(AUTH_EXCEPTION_FIELD_DESC);
          struct.authException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.runTimeException != null) {
          oprot.writeFieldBegin(RUN_TIME_EXCEPTION_FIELD_DESC);
          struct.runTimeException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class commit_resultTupleSchemeFactory implements SchemeFactory {
      public commit_resultTupleScheme getScheme() {
        return new commit_resultTupleScheme();
      }
    }

    private static class commit_resultTupleScheme extends TupleScheme<commit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAuthException()) {
          optionals.set(1);
        }
        if (struct.isSetRunTimeException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAuthException()) {
          struct.authException.write(oprot);
        }
        if (struct.isSetRunTimeException()) {
          struct.runTimeException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new CommitQueryReply();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.authException = new AuthorizationException();
          struct.authException.read(iprot);
          struct.setAuthExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.runTimeException = new RuntimeException();
          struct.runTimeException.read(iprot);
          struct.setRunTimeExceptionIsSet(true);
        }
      }
    }

  }

  public static class queryJobStatus_args implements org.apache.thrift.TBase<queryJobStatus_args, queryJobStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryJobStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryJobStatus_args");

    private static final org.apache.thrift.protocol.TField QS_FIELD_DESC = new org.apache.thrift.protocol.TField("qs", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryJobStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryJobStatus_argsTupleSchemeFactory());
    }

    public QueryStatus qs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QS((short)1, "qs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QS
            return QS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QS, new org.apache.thrift.meta_data.FieldMetaData("qs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QueryStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryJobStatus_args.class, metaDataMap);
    }

    public queryJobStatus_args() {
    }

    public queryJobStatus_args(
      QueryStatus qs)
    {
      this();
      this.qs = qs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryJobStatus_args(queryJobStatus_args other) {
      if (other.isSetQs()) {
        this.qs = new QueryStatus(other.qs);
      }
    }

    public queryJobStatus_args deepCopy() {
      return new queryJobStatus_args(this);
    }

    @Override
    public void clear() {
      this.qs = null;
    }

    public QueryStatus getQs() {
      return this.qs;
    }

    public queryJobStatus_args setQs(QueryStatus qs) {
      this.qs = qs;
      return this;
    }

    public void unsetQs() {
      this.qs = null;
    }

    /** Returns true if field qs is set (has been assigned a value) and false otherwise */
    public boolean isSetQs() {
      return this.qs != null;
    }

    public void setQsIsSet(boolean value) {
      if (!value) {
        this.qs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QS:
        if (value == null) {
          unsetQs();
        } else {
          setQs((QueryStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QS:
        return getQs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QS:
        return isSetQs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryJobStatus_args)
        return this.equals((queryJobStatus_args)that);
      return false;
    }

    public boolean equals(queryJobStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_qs = true && this.isSetQs();
      boolean that_present_qs = true && that.isSetQs();
      if (this_present_qs || that_present_qs) {
        if (!(this_present_qs && that_present_qs))
          return false;
        if (!this.qs.equals(that.qs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_qs = true && (isSetQs());
      list.add(present_qs);
      if (present_qs)
        list.add(qs);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryJobStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQs()).compareTo(other.isSetQs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qs, other.qs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryJobStatus_args(");
      boolean first = true;

      sb.append("qs:");
      if (this.qs == null) {
        sb.append("null");
      } else {
        sb.append(this.qs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (qs != null) {
        qs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryJobStatus_argsStandardSchemeFactory implements SchemeFactory {
      public queryJobStatus_argsStandardScheme getScheme() {
        return new queryJobStatus_argsStandardScheme();
      }
    }

    private static class queryJobStatus_argsStandardScheme extends StandardScheme<queryJobStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryJobStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qs = new QueryStatus();
                struct.qs.read(iprot);
                struct.setQsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryJobStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.qs != null) {
          oprot.writeFieldBegin(QS_FIELD_DESC);
          struct.qs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryJobStatus_argsTupleSchemeFactory implements SchemeFactory {
      public queryJobStatus_argsTupleScheme getScheme() {
        return new queryJobStatus_argsTupleScheme();
      }
    }

    private static class queryJobStatus_argsTupleScheme extends TupleScheme<queryJobStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryJobStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQs()) {
          struct.qs.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryJobStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.qs = new QueryStatus();
          struct.qs.read(iprot);
          struct.setQsIsSet(true);
        }
      }
    }

  }

  public static class queryJobStatus_result implements org.apache.thrift.TBase<queryJobStatus_result, queryJobStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryJobStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryJobStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("notFoundException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryJobStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryJobStatus_resultTupleSchemeFactory());
    }

    public QueryStatusReply success; // required
    public NotFoundException notFoundException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      NOT_FOUND_EXCEPTION((short)1, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QueryStatusReply.class)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("notFoundException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryJobStatus_result.class, metaDataMap);
    }

    public queryJobStatus_result() {
    }

    public queryJobStatus_result(
      QueryStatusReply success,
      NotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryJobStatus_result(queryJobStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new QueryStatusReply(other.success);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new NotFoundException(other.notFoundException);
      }
    }

    public queryJobStatus_result deepCopy() {
      return new queryJobStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.notFoundException = null;
    }

    public QueryStatusReply getSuccess() {
      return this.success;
    }

    public queryJobStatus_result setSuccess(QueryStatusReply success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public queryJobStatus_result setNotFoundException(NotFoundException notFoundException) {
      this.notFoundException = notFoundException;
      return this;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been assigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((QueryStatusReply)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((NotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryJobStatus_result)
        return this.equals((queryJobStatus_result)that);
      return false;
    }

    public boolean equals(queryJobStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_notFoundException = true && (isSetNotFoundException());
      list.add(present_notFoundException);
      if (present_notFoundException)
        list.add(notFoundException);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryJobStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notFoundException, other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryJobStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryJobStatus_resultStandardSchemeFactory implements SchemeFactory {
      public queryJobStatus_resultStandardScheme getScheme() {
        return new queryJobStatus_resultStandardScheme();
      }
    }

    private static class queryJobStatus_resultStandardScheme extends StandardScheme<queryJobStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryJobStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new QueryStatusReply();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // NOT_FOUND_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notFoundException = new NotFoundException();
                struct.notFoundException.read(iprot);
                struct.setNotFoundExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryJobStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notFoundException != null) {
          oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
          struct.notFoundException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryJobStatus_resultTupleSchemeFactory implements SchemeFactory {
      public queryJobStatus_resultTupleScheme getScheme() {
        return new queryJobStatus_resultTupleScheme();
      }
    }

    private static class queryJobStatus_resultTupleScheme extends TupleScheme<queryJobStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryJobStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetNotFoundException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetNotFoundException()) {
          struct.notFoundException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryJobStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new QueryStatusReply();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.notFoundException = new NotFoundException();
          struct.notFoundException.read(iprot);
          struct.setNotFoundExceptionIsSet(true);
        }
      }
    }

  }

  public static class cancelJob_args implements org.apache.thrift.TBase<cancelJob_args, cancelJob_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelJob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelJob_args");

    private static final org.apache.thrift.protocol.TField CQ_FIELD_DESC = new org.apache.thrift.protocol.TField("cq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelJob_argsTupleSchemeFactory());
    }

    public CancelQuery cq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CQ((short)1, "cq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CQ
            return CQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CQ, new org.apache.thrift.meta_data.FieldMetaData("cq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CancelQuery.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelJob_args.class, metaDataMap);
    }

    public cancelJob_args() {
    }

    public cancelJob_args(
      CancelQuery cq)
    {
      this();
      this.cq = cq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelJob_args(cancelJob_args other) {
      if (other.isSetCq()) {
        this.cq = new CancelQuery(other.cq);
      }
    }

    public cancelJob_args deepCopy() {
      return new cancelJob_args(this);
    }

    @Override
    public void clear() {
      this.cq = null;
    }

    public CancelQuery getCq() {
      return this.cq;
    }

    public cancelJob_args setCq(CancelQuery cq) {
      this.cq = cq;
      return this;
    }

    public void unsetCq() {
      this.cq = null;
    }

    /** Returns true if field cq is set (has been assigned a value) and false otherwise */
    public boolean isSetCq() {
      return this.cq != null;
    }

    public void setCqIsSet(boolean value) {
      if (!value) {
        this.cq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CQ:
        if (value == null) {
          unsetCq();
        } else {
          setCq((CancelQuery)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CQ:
        return getCq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CQ:
        return isSetCq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelJob_args)
        return this.equals((cancelJob_args)that);
      return false;
    }

    public boolean equals(cancelJob_args that) {
      if (that == null)
        return false;

      boolean this_present_cq = true && this.isSetCq();
      boolean that_present_cq = true && that.isSetCq();
      if (this_present_cq || that_present_cq) {
        if (!(this_present_cq && that_present_cq))
          return false;
        if (!this.cq.equals(that.cq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cq = true && (isSetCq());
      list.add(present_cq);
      if (present_cq)
        list.add(cq);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCq()).compareTo(other.isSetCq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cq, other.cq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelJob_args(");
      boolean first = true;

      sb.append("cq:");
      if (this.cq == null) {
        sb.append("null");
      } else {
        sb.append(this.cq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cq != null) {
        cq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelJob_argsStandardSchemeFactory implements SchemeFactory {
      public cancelJob_argsStandardScheme getScheme() {
        return new cancelJob_argsStandardScheme();
      }
    }

    private static class cancelJob_argsStandardScheme extends StandardScheme<cancelJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cq = new CancelQuery();
                struct.cq.read(iprot);
                struct.setCqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cq != null) {
          oprot.writeFieldBegin(CQ_FIELD_DESC);
          struct.cq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelJob_argsTupleSchemeFactory implements SchemeFactory {
      public cancelJob_argsTupleScheme getScheme() {
        return new cancelJob_argsTupleScheme();
      }
    }

    private static class cancelJob_argsTupleScheme extends TupleScheme<cancelJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCq()) {
          struct.cq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cq = new CancelQuery();
          struct.cq.read(iprot);
          struct.setCqIsSet(true);
        }
      }
    }

  }

  public static class cancelJob_result implements org.apache.thrift.TBase<cancelJob_result, cancelJob_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelJob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AUTH_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("notFoundException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelJob_resultTupleSchemeFactory());
    }

    public CancelQueryReply success; // required
    public AuthorizationException authException; // required
    public NotFoundException notFoundException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AUTH_EXCEPTION((short)1, "authException"),
      NOT_FOUND_EXCEPTION((short)2, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AUTH_EXCEPTION
            return AUTH_EXCEPTION;
          case 2: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CancelQueryReply.class)));
      tmpMap.put(_Fields.AUTH_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("notFoundException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelJob_result.class, metaDataMap);
    }

    public cancelJob_result() {
    }

    public cancelJob_result(
      CancelQueryReply success,
      AuthorizationException authException,
      NotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.authException = authException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelJob_result(cancelJob_result other) {
      if (other.isSetSuccess()) {
        this.success = new CancelQueryReply(other.success);
      }
      if (other.isSetAuthException()) {
        this.authException = new AuthorizationException(other.authException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new NotFoundException(other.notFoundException);
      }
    }

    public cancelJob_result deepCopy() {
      return new cancelJob_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.authException = null;
      this.notFoundException = null;
    }

    public CancelQueryReply getSuccess() {
      return this.success;
    }

    public cancelJob_result setSuccess(CancelQueryReply success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public AuthorizationException getAuthException() {
      return this.authException;
    }

    public cancelJob_result setAuthException(AuthorizationException authException) {
      this.authException = authException;
      return this;
    }

    public void unsetAuthException() {
      this.authException = null;
    }

    /** Returns true if field authException is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthException() {
      return this.authException != null;
    }

    public void setAuthExceptionIsSet(boolean value) {
      if (!value) {
        this.authException = null;
      }
    }

    public NotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public cancelJob_result setNotFoundException(NotFoundException notFoundException) {
      this.notFoundException = notFoundException;
      return this;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been assigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CancelQueryReply)value);
        }
        break;

      case AUTH_EXCEPTION:
        if (value == null) {
          unsetAuthException();
        } else {
          setAuthException((AuthorizationException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((NotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AUTH_EXCEPTION:
        return getAuthException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AUTH_EXCEPTION:
        return isSetAuthException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelJob_result)
        return this.equals((cancelJob_result)that);
      return false;
    }

    public boolean equals(cancelJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_authException = true && this.isSetAuthException();
      boolean that_present_authException = true && that.isSetAuthException();
      if (this_present_authException || that_present_authException) {
        if (!(this_present_authException && that_present_authException))
          return false;
        if (!this.authException.equals(that.authException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_authException = true && (isSetAuthException());
      list.add(present_authException);
      if (present_authException)
        list.add(authException);

      boolean present_notFoundException = true && (isSetNotFoundException());
      list.add(present_notFoundException);
      if (present_notFoundException)
        list.add(notFoundException);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthException()).compareTo(other.isSetAuthException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authException, other.authException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notFoundException, other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelJob_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authException:");
      if (this.authException == null) {
        sb.append("null");
      } else {
        sb.append(this.authException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelJob_resultStandardSchemeFactory implements SchemeFactory {
      public cancelJob_resultStandardScheme getScheme() {
        return new cancelJob_resultStandardScheme();
      }
    }

    private static class cancelJob_resultStandardScheme extends StandardScheme<cancelJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CancelQueryReply();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AUTH_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authException = new AuthorizationException();
                struct.authException.read(iprot);
                struct.setAuthExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOT_FOUND_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notFoundException = new NotFoundException();
                struct.notFoundException.read(iprot);
                struct.setNotFoundExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authException != null) {
          oprot.writeFieldBegin(AUTH_EXCEPTION_FIELD_DESC);
          struct.authException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notFoundException != null) {
          oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
          struct.notFoundException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelJob_resultTupleSchemeFactory implements SchemeFactory {
      public cancelJob_resultTupleScheme getScheme() {
        return new cancelJob_resultTupleScheme();
      }
    }

    private static class cancelJob_resultTupleScheme extends TupleScheme<cancelJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAuthException()) {
          optionals.set(1);
        }
        if (struct.isSetNotFoundException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAuthException()) {
          struct.authException.write(oprot);
        }
        if (struct.isSetNotFoundException()) {
          struct.notFoundException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new CancelQueryReply();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.authException = new AuthorizationException();
          struct.authException.read(iprot);
          struct.setAuthExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.notFoundException = new NotFoundException();
          struct.notFoundException.read(iprot);
          struct.setNotFoundExceptionIsSet(true);
        }
      }
    }

  }

  public static class laodData_args implements org.apache.thrift.TBase<laodData_args, laodData_args._Fields>, java.io.Serializable, Cloneable, Comparable<laodData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("laodData_args");

    private static final org.apache.thrift.protocol.TField LF_FIELD_DESC = new org.apache.thrift.protocol.TField("lf", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new laodData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new laodData_argsTupleSchemeFactory());
    }

    public LoadFile lf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LF((short)1, "lf");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LF
            return LF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LF, new org.apache.thrift.meta_data.FieldMetaData("lf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoadFile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(laodData_args.class, metaDataMap);
    }

    public laodData_args() {
    }

    public laodData_args(
      LoadFile lf)
    {
      this();
      this.lf = lf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public laodData_args(laodData_args other) {
      if (other.isSetLf()) {
        this.lf = new LoadFile(other.lf);
      }
    }

    public laodData_args deepCopy() {
      return new laodData_args(this);
    }

    @Override
    public void clear() {
      this.lf = null;
    }

    public LoadFile getLf() {
      return this.lf;
    }

    public laodData_args setLf(LoadFile lf) {
      this.lf = lf;
      return this;
    }

    public void unsetLf() {
      this.lf = null;
    }

    /** Returns true if field lf is set (has been assigned a value) and false otherwise */
    public boolean isSetLf() {
      return this.lf != null;
    }

    public void setLfIsSet(boolean value) {
      if (!value) {
        this.lf = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LF:
        if (value == null) {
          unsetLf();
        } else {
          setLf((LoadFile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LF:
        return getLf();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LF:
        return isSetLf();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof laodData_args)
        return this.equals((laodData_args)that);
      return false;
    }

    public boolean equals(laodData_args that) {
      if (that == null)
        return false;

      boolean this_present_lf = true && this.isSetLf();
      boolean that_present_lf = true && that.isSetLf();
      if (this_present_lf || that_present_lf) {
        if (!(this_present_lf && that_present_lf))
          return false;
        if (!this.lf.equals(that.lf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_lf = true && (isSetLf());
      list.add(present_lf);
      if (present_lf)
        list.add(lf);

      return list.hashCode();
    }

    @Override
    public int compareTo(laodData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLf()).compareTo(other.isSetLf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lf, other.lf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("laodData_args(");
      boolean first = true;

      sb.append("lf:");
      if (this.lf == null) {
        sb.append("null");
      } else {
        sb.append(this.lf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (lf != null) {
        lf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class laodData_argsStandardSchemeFactory implements SchemeFactory {
      public laodData_argsStandardScheme getScheme() {
        return new laodData_argsStandardScheme();
      }
    }

    private static class laodData_argsStandardScheme extends StandardScheme<laodData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, laodData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lf = new LoadFile();
                struct.lf.read(iprot);
                struct.setLfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, laodData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lf != null) {
          oprot.writeFieldBegin(LF_FIELD_DESC);
          struct.lf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class laodData_argsTupleSchemeFactory implements SchemeFactory {
      public laodData_argsTupleScheme getScheme() {
        return new laodData_argsTupleScheme();
      }
    }

    private static class laodData_argsTupleScheme extends TupleScheme<laodData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, laodData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLf()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLf()) {
          struct.lf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, laodData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lf = new LoadFile();
          struct.lf.read(iprot);
          struct.setLfIsSet(true);
        }
      }
    }

  }

  public static class laodData_result implements org.apache.thrift.TBase<laodData_result, laodData_result._Fields>, java.io.Serializable, Cloneable, Comparable<laodData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("laodData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AUTH_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RUN_TIME_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("runTimeException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new laodData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new laodData_resultTupleSchemeFactory());
    }

    public LoadFileReply success; // required
    public AuthorizationException authException; // required
    public RuntimeException runTimeException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AUTH_EXCEPTION((short)1, "authException"),
      RUN_TIME_EXCEPTION((short)2, "runTimeException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AUTH_EXCEPTION
            return AUTH_EXCEPTION;
          case 2: // RUN_TIME_EXCEPTION
            return RUN_TIME_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoadFileReply.class)));
      tmpMap.put(_Fields.AUTH_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RUN_TIME_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("runTimeException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(laodData_result.class, metaDataMap);
    }

    public laodData_result() {
    }

    public laodData_result(
      LoadFileReply success,
      AuthorizationException authException,
      RuntimeException runTimeException)
    {
      this();
      this.success = success;
      this.authException = authException;
      this.runTimeException = runTimeException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public laodData_result(laodData_result other) {
      if (other.isSetSuccess()) {
        this.success = new LoadFileReply(other.success);
      }
      if (other.isSetAuthException()) {
        this.authException = new AuthorizationException(other.authException);
      }
      if (other.isSetRunTimeException()) {
        this.runTimeException = new RuntimeException(other.runTimeException);
      }
    }

    public laodData_result deepCopy() {
      return new laodData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.authException = null;
      this.runTimeException = null;
    }

    public LoadFileReply getSuccess() {
      return this.success;
    }

    public laodData_result setSuccess(LoadFileReply success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public AuthorizationException getAuthException() {
      return this.authException;
    }

    public laodData_result setAuthException(AuthorizationException authException) {
      this.authException = authException;
      return this;
    }

    public void unsetAuthException() {
      this.authException = null;
    }

    /** Returns true if field authException is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthException() {
      return this.authException != null;
    }

    public void setAuthExceptionIsSet(boolean value) {
      if (!value) {
        this.authException = null;
      }
    }

    public RuntimeException getRunTimeException() {
      return this.runTimeException;
    }

    public laodData_result setRunTimeException(RuntimeException runTimeException) {
      this.runTimeException = runTimeException;
      return this;
    }

    public void unsetRunTimeException() {
      this.runTimeException = null;
    }

    /** Returns true if field runTimeException is set (has been assigned a value) and false otherwise */
    public boolean isSetRunTimeException() {
      return this.runTimeException != null;
    }

    public void setRunTimeExceptionIsSet(boolean value) {
      if (!value) {
        this.runTimeException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LoadFileReply)value);
        }
        break;

      case AUTH_EXCEPTION:
        if (value == null) {
          unsetAuthException();
        } else {
          setAuthException((AuthorizationException)value);
        }
        break;

      case RUN_TIME_EXCEPTION:
        if (value == null) {
          unsetRunTimeException();
        } else {
          setRunTimeException((RuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AUTH_EXCEPTION:
        return getAuthException();

      case RUN_TIME_EXCEPTION:
        return getRunTimeException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AUTH_EXCEPTION:
        return isSetAuthException();
      case RUN_TIME_EXCEPTION:
        return isSetRunTimeException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof laodData_result)
        return this.equals((laodData_result)that);
      return false;
    }

    public boolean equals(laodData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_authException = true && this.isSetAuthException();
      boolean that_present_authException = true && that.isSetAuthException();
      if (this_present_authException || that_present_authException) {
        if (!(this_present_authException && that_present_authException))
          return false;
        if (!this.authException.equals(that.authException))
          return false;
      }

      boolean this_present_runTimeException = true && this.isSetRunTimeException();
      boolean that_present_runTimeException = true && that.isSetRunTimeException();
      if (this_present_runTimeException || that_present_runTimeException) {
        if (!(this_present_runTimeException && that_present_runTimeException))
          return false;
        if (!this.runTimeException.equals(that.runTimeException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_authException = true && (isSetAuthException());
      list.add(present_authException);
      if (present_authException)
        list.add(authException);

      boolean present_runTimeException = true && (isSetRunTimeException());
      list.add(present_runTimeException);
      if (present_runTimeException)
        list.add(runTimeException);

      return list.hashCode();
    }

    @Override
    public int compareTo(laodData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthException()).compareTo(other.isSetAuthException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authException, other.authException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRunTimeException()).compareTo(other.isSetRunTimeException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRunTimeException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runTimeException, other.runTimeException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("laodData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authException:");
      if (this.authException == null) {
        sb.append("null");
      } else {
        sb.append(this.authException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("runTimeException:");
      if (this.runTimeException == null) {
        sb.append("null");
      } else {
        sb.append(this.runTimeException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class laodData_resultStandardSchemeFactory implements SchemeFactory {
      public laodData_resultStandardScheme getScheme() {
        return new laodData_resultStandardScheme();
      }
    }

    private static class laodData_resultStandardScheme extends StandardScheme<laodData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, laodData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LoadFileReply();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AUTH_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authException = new AuthorizationException();
                struct.authException.read(iprot);
                struct.setAuthExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RUN_TIME_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.runTimeException = new RuntimeException();
                struct.runTimeException.read(iprot);
                struct.setRunTimeExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, laodData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authException != null) {
          oprot.writeFieldBegin(AUTH_EXCEPTION_FIELD_DESC);
          struct.authException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.runTimeException != null) {
          oprot.writeFieldBegin(RUN_TIME_EXCEPTION_FIELD_DESC);
          struct.runTimeException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class laodData_resultTupleSchemeFactory implements SchemeFactory {
      public laodData_resultTupleScheme getScheme() {
        return new laodData_resultTupleScheme();
      }
    }

    private static class laodData_resultTupleScheme extends TupleScheme<laodData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, laodData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAuthException()) {
          optionals.set(1);
        }
        if (struct.isSetRunTimeException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAuthException()) {
          struct.authException.write(oprot);
        }
        if (struct.isSetRunTimeException()) {
          struct.runTimeException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, laodData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new LoadFileReply();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.authException = new AuthorizationException();
          struct.authException.read(iprot);
          struct.setAuthExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.runTimeException = new RuntimeException();
          struct.runTimeException.read(iprot);
          struct.setRunTimeExceptionIsSet(true);
        }
      }
    }

  }

}
