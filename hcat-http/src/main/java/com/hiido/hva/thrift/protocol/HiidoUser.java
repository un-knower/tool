/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hiido.hva.thrift.protocol;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-21")
public class HiidoUser implements org.apache.thrift.TBase<HiidoUser, HiidoUser._Fields>, java.io.Serializable, Cloneable, Comparable<HiidoUser> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HiidoUser");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COMPARY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("comparyId", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HiidoUserStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HiidoUserTupleSchemeFactory());
  }

  public int uid; // required
  public int comparyId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    COMPARY_ID((short)2, "comparyId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // COMPARY_ID
          return COMPARY_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UID_ISSET_ID = 0;
  private static final int __COMPARYID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPARY_ID, new org.apache.thrift.meta_data.FieldMetaData("comparyId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HiidoUser.class, metaDataMap);
  }

  public HiidoUser() {
  }

  public HiidoUser(
    int uid,
    int comparyId)
  {
    this();
    this.uid = uid;
    setUidIsSet(true);
    this.comparyId = comparyId;
    setComparyIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HiidoUser(HiidoUser other) {
    __isset_bitfield = other.__isset_bitfield;
    this.uid = other.uid;
    this.comparyId = other.comparyId;
  }

  public HiidoUser deepCopy() {
    return new HiidoUser(this);
  }

  @Override
  public void clear() {
    setUidIsSet(false);
    this.uid = 0;
    setComparyIdIsSet(false);
    this.comparyId = 0;
  }

  public int getUid() {
    return this.uid;
  }

  public HiidoUser setUid(int uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public int getComparyId() {
    return this.comparyId;
  }

  public HiidoUser setComparyId(int comparyId) {
    this.comparyId = comparyId;
    setComparyIdIsSet(true);
    return this;
  }

  public void unsetComparyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPARYID_ISSET_ID);
  }

  /** Returns true if field comparyId is set (has been assigned a value) and false otherwise */
  public boolean isSetComparyId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPARYID_ISSET_ID);
  }

  public void setComparyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPARYID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Integer)value);
      }
      break;

    case COMPARY_ID:
      if (value == null) {
        unsetComparyId();
      } else {
        setComparyId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case COMPARY_ID:
      return getComparyId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case COMPARY_ID:
      return isSetComparyId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HiidoUser)
      return this.equals((HiidoUser)that);
    return false;
  }

  public boolean equals(HiidoUser that) {
    if (that == null)
      return false;

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_comparyId = true;
    boolean that_present_comparyId = true;
    if (this_present_comparyId || that_present_comparyId) {
      if (!(this_present_comparyId && that_present_comparyId))
        return false;
      if (this.comparyId != that.comparyId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uid = true;
    list.add(present_uid);
    if (present_uid)
      list.add(uid);

    boolean present_comparyId = true;
    list.add(present_comparyId);
    if (present_comparyId)
      list.add(comparyId);

    return list.hashCode();
  }

  @Override
  public int compareTo(HiidoUser other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComparyId()).compareTo(other.isSetComparyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComparyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comparyId, other.comparyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HiidoUser(");
    boolean first = true;

    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("comparyId:");
    sb.append(this.comparyId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // alas, we cannot check 'uid' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'comparyId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HiidoUserStandardSchemeFactory implements SchemeFactory {
    public HiidoUserStandardScheme getScheme() {
      return new HiidoUserStandardScheme();
    }
  }

  private static class HiidoUserStandardScheme extends StandardScheme<HiidoUser> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HiidoUser struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uid = iprot.readI32();
              struct.setUidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPARY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.comparyId = iprot.readI32();
              struct.setComparyIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUid()) {
        throw new TProtocolException("Required field 'uid' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetComparyId()) {
        throw new TProtocolException("Required field 'comparyId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HiidoUser struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI32(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMPARY_ID_FIELD_DESC);
      oprot.writeI32(struct.comparyId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HiidoUserTupleSchemeFactory implements SchemeFactory {
    public HiidoUserTupleScheme getScheme() {
      return new HiidoUserTupleScheme();
    }
  }

  private static class HiidoUserTupleScheme extends TupleScheme<HiidoUser> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HiidoUser struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.uid);
      oprot.writeI32(struct.comparyId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HiidoUser struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uid = iprot.readI32();
      struct.setUidIsSet(true);
      struct.comparyId = iprot.readI32();
      struct.setComparyIdIsSet(true);
    }
  }

}

