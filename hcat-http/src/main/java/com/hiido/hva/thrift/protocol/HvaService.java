/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hiido.hva.thrift.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-11-01")
public class HvaService {

  public interface Iface {

    public Reply validate(String serviceType, HiidoUser user, Set<Obj> data) throws AuthorizationException, RuntimeException, TException;

    public Reply validate4Dw(String serviceType, String dwInfo, Set<Obj> data) throws AuthorizationException, RuntimeException, TException;

    public Reply setPrivileges(String serviceType, int user, String name, String ntype, byte privilege) throws AuthorizationException, RuntimeException, TException;

    public Reply setPrivileges4Dw(String serviceType, String user, String name, String ntype, byte privilege) throws AuthorizationException, RuntimeException, TException;

    public Reply request(String serviceType, Map<String, String> request) throws AuthorizationException, RuntimeException, TException;

  }

  public interface AsyncIface {

    public void validate(String serviceType, HiidoUser user, Set<Obj> data, AsyncMethodCallback resultHandler) throws TException;

    public void validate4Dw(String serviceType, String dwInfo, Set<Obj> data, AsyncMethodCallback resultHandler) throws TException;

    public void setPrivileges(String serviceType, int user, String name, String ntype, byte privilege, AsyncMethodCallback resultHandler) throws TException;

    public void setPrivileges4Dw(String serviceType, String user, String name, String ntype, byte privilege, AsyncMethodCallback resultHandler) throws TException;

    public void request(String serviceType, Map<String, String> request, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Reply validate(String serviceType, HiidoUser user, Set<Obj> data) throws AuthorizationException, RuntimeException, TException
    {
      send_validate(serviceType, user, data);
      return recv_validate();
    }

    public void send_validate(String serviceType, HiidoUser user, Set<Obj> data) throws TException
    {
      validate_args args = new validate_args();
      args.setServiceType(serviceType);
      args.setUser(user);
      args.setData(data);
      sendBase("validate", args);
    }

    public Reply recv_validate() throws AuthorizationException, RuntimeException, TException
    {
      validate_result result = new validate_result();
      receiveBase(result, "validate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.authException != null) {
        throw result.authException;
      }
      if (result.runtimeException != null) {
        throw result.runtimeException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "validate failed: unknown result");
    }

    public Reply validate4Dw(String serviceType, String dwInfo, Set<Obj> data) throws AuthorizationException, RuntimeException, TException
    {
      send_validate4Dw(serviceType, dwInfo, data);
      return recv_validate4Dw();
    }

    public void send_validate4Dw(String serviceType, String dwInfo, Set<Obj> data) throws TException
    {
      validate4Dw_args args = new validate4Dw_args();
      args.setServiceType(serviceType);
      args.setDwInfo(dwInfo);
      args.setData(data);
      sendBase("validate4Dw", args);
    }

    public Reply recv_validate4Dw() throws AuthorizationException, RuntimeException, TException
    {
      validate4Dw_result result = new validate4Dw_result();
      receiveBase(result, "validate4Dw");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.authException != null) {
        throw result.authException;
      }
      if (result.runtimeException != null) {
        throw result.runtimeException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "validate4Dw failed: unknown result");
    }

    public Reply setPrivileges(String serviceType, int user, String name, String ntype, byte privilege) throws AuthorizationException, RuntimeException, TException
    {
      send_setPrivileges(serviceType, user, name, ntype, privilege);
      return recv_setPrivileges();
    }

    public void send_setPrivileges(String serviceType, int user, String name, String ntype, byte privilege) throws TException
    {
      setPrivileges_args args = new setPrivileges_args();
      args.setServiceType(serviceType);
      args.setUser(user);
      args.setName(name);
      args.setNtype(ntype);
      args.setPrivilege(privilege);
      sendBase("setPrivileges", args);
    }

    public Reply recv_setPrivileges() throws AuthorizationException, RuntimeException, TException
    {
      setPrivileges_result result = new setPrivileges_result();
      receiveBase(result, "setPrivileges");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.authException != null) {
        throw result.authException;
      }
      if (result.runtimeException != null) {
        throw result.runtimeException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setPrivileges failed: unknown result");
    }

    public Reply setPrivileges4Dw(String serviceType, String user, String name, String ntype, byte privilege) throws AuthorizationException, RuntimeException, TException
    {
      send_setPrivileges4Dw(serviceType, user, name, ntype, privilege);
      return recv_setPrivileges4Dw();
    }

    public void send_setPrivileges4Dw(String serviceType, String user, String name, String ntype, byte privilege) throws TException
    {
      setPrivileges4Dw_args args = new setPrivileges4Dw_args();
      args.setServiceType(serviceType);
      args.setUser(user);
      args.setName(name);
      args.setNtype(ntype);
      args.setPrivilege(privilege);
      sendBase("setPrivileges4Dw", args);
    }

    public Reply recv_setPrivileges4Dw() throws AuthorizationException, RuntimeException, TException
    {
      setPrivileges4Dw_result result = new setPrivileges4Dw_result();
      receiveBase(result, "setPrivileges4Dw");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.authException != null) {
        throw result.authException;
      }
      if (result.runtimeException != null) {
        throw result.runtimeException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setPrivileges4Dw failed: unknown result");
    }

    public Reply request(String serviceType, Map<String,String> request) throws AuthorizationException, RuntimeException, TException
    {
      send_request(serviceType, request);
      return recv_request();
    }

    public void send_request(String serviceType, Map<String,String> request) throws TException
    {
      request_args args = new request_args();
      args.setServiceType(serviceType);
      args.setRequest(request);
      sendBase("request", args);
    }

    public Reply recv_request() throws AuthorizationException, RuntimeException, TException
    {
      request_result result = new request_result();
      receiveBase(result, "request");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.authException != null) {
        throw result.authException;
      }
      if (result.runtimeException != null) {
        throw result.runtimeException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "request failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void validate(String serviceType, HiidoUser user, Set<Obj> data, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      validate_call method_call = new validate_call(serviceType, user, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class validate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String serviceType;
      private HiidoUser user;
      private Set<Obj> data;
      public validate_call(String serviceType, HiidoUser user, Set<Obj> data, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceType = serviceType;
        this.user = user;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("validate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        validate_args args = new validate_args();
        args.setServiceType(serviceType);
        args.setUser(user);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Reply getResult() throws AuthorizationException, RuntimeException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_validate();
      }
    }

    public void validate4Dw(String serviceType, String dwInfo, Set<Obj> data, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      validate4Dw_call method_call = new validate4Dw_call(serviceType, dwInfo, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class validate4Dw_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String serviceType;
      private String dwInfo;
      private Set<Obj> data;
      public validate4Dw_call(String serviceType, String dwInfo, Set<Obj> data, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceType = serviceType;
        this.dwInfo = dwInfo;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("validate4Dw", org.apache.thrift.protocol.TMessageType.CALL, 0));
        validate4Dw_args args = new validate4Dw_args();
        args.setServiceType(serviceType);
        args.setDwInfo(dwInfo);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Reply getResult() throws AuthorizationException, RuntimeException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_validate4Dw();
      }
    }

    public void setPrivileges(String serviceType, int user, String name, String ntype, byte privilege, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      setPrivileges_call method_call = new setPrivileges_call(serviceType, user, name, ntype, privilege, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setPrivileges_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String serviceType;
      private int user;
      private String name;
      private String ntype;
      private byte privilege;
      public setPrivileges_call(String serviceType, int user, String name, String ntype, byte privilege, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceType = serviceType;
        this.user = user;
        this.name = name;
        this.ntype = ntype;
        this.privilege = privilege;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setPrivileges", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setPrivileges_args args = new setPrivileges_args();
        args.setServiceType(serviceType);
        args.setUser(user);
        args.setName(name);
        args.setNtype(ntype);
        args.setPrivilege(privilege);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Reply getResult() throws AuthorizationException, RuntimeException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setPrivileges();
      }
    }

    public void setPrivileges4Dw(String serviceType, String user, String name, String ntype, byte privilege, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      setPrivileges4Dw_call method_call = new setPrivileges4Dw_call(serviceType, user, name, ntype, privilege, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setPrivileges4Dw_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String serviceType;
      private String user;
      private String name;
      private String ntype;
      private byte privilege;
      public setPrivileges4Dw_call(String serviceType, String user, String name, String ntype, byte privilege, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceType = serviceType;
        this.user = user;
        this.name = name;
        this.ntype = ntype;
        this.privilege = privilege;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setPrivileges4Dw", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setPrivileges4Dw_args args = new setPrivileges4Dw_args();
        args.setServiceType(serviceType);
        args.setUser(user);
        args.setName(name);
        args.setNtype(ntype);
        args.setPrivilege(privilege);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Reply getResult() throws AuthorizationException, RuntimeException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setPrivileges4Dw();
      }
    }

    public void request(String serviceType, Map<String,String> request, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      request_call method_call = new request_call(serviceType, request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class request_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String serviceType;
      private Map<String,String> request;
      public request_call(String serviceType, Map<String,String> request, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceType = serviceType;
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("request", org.apache.thrift.protocol.TMessageType.CALL, 0));
        request_args args = new request_args();
        args.setServiceType(serviceType);
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Reply getResult() throws AuthorizationException, RuntimeException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_request();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("validate", new validate());
      processMap.put("validate4Dw", new validate4Dw());
      processMap.put("setPrivileges", new setPrivileges());
      processMap.put("setPrivileges4Dw", new setPrivileges4Dw());
      processMap.put("request", new request());
      return processMap;
    }

    public static class validate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, validate_args> {
      public validate() {
        super("validate");
      }

      public validate_args getEmptyArgsInstance() {
        return new validate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public validate_result getResult(I iface, validate_args args) throws TException {
        validate_result result = new validate_result();
        try {
          result.success = iface.validate(args.serviceType, args.user, args.data);
        } catch (AuthorizationException authException) {
          result.authException = authException;
        } catch (RuntimeException runtimeException) {
          result.runtimeException = runtimeException;
        }
        return result;
      }
    }

    public static class validate4Dw<I extends Iface> extends org.apache.thrift.ProcessFunction<I, validate4Dw_args> {
      public validate4Dw() {
        super("validate4Dw");
      }

      public validate4Dw_args getEmptyArgsInstance() {
        return new validate4Dw_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public validate4Dw_result getResult(I iface, validate4Dw_args args) throws TException {
        validate4Dw_result result = new validate4Dw_result();
        try {
          result.success = iface.validate4Dw(args.serviceType, args.dwInfo, args.data);
        } catch (AuthorizationException authException) {
          result.authException = authException;
        } catch (RuntimeException runtimeException) {
          result.runtimeException = runtimeException;
        }
        return result;
      }
    }

    public static class setPrivileges<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPrivileges_args> {
      public setPrivileges() {
        super("setPrivileges");
      }

      public setPrivileges_args getEmptyArgsInstance() {
        return new setPrivileges_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setPrivileges_result getResult(I iface, setPrivileges_args args) throws TException {
        setPrivileges_result result = new setPrivileges_result();
        try {
          result.success = iface.setPrivileges(args.serviceType, args.user, args.name, args.ntype, args.privilege);
        } catch (AuthorizationException authException) {
          result.authException = authException;
        } catch (RuntimeException runtimeException) {
          result.runtimeException = runtimeException;
        }
        return result;
      }
    }

    public static class setPrivileges4Dw<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPrivileges4Dw_args> {
      public setPrivileges4Dw() {
        super("setPrivileges4Dw");
      }

      public setPrivileges4Dw_args getEmptyArgsInstance() {
        return new setPrivileges4Dw_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setPrivileges4Dw_result getResult(I iface, setPrivileges4Dw_args args) throws TException {
        setPrivileges4Dw_result result = new setPrivileges4Dw_result();
        try {
          result.success = iface.setPrivileges4Dw(args.serviceType, args.user, args.name, args.ntype, args.privilege);
        } catch (AuthorizationException authException) {
          result.authException = authException;
        } catch (RuntimeException runtimeException) {
          result.runtimeException = runtimeException;
        }
        return result;
      }
    }

    public static class request<I extends Iface> extends org.apache.thrift.ProcessFunction<I, request_args> {
      public request() {
        super("request");
      }

      public request_args getEmptyArgsInstance() {
        return new request_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public request_result getResult(I iface, request_args args) throws TException {
        request_result result = new request_result();
        try {
          result.success = iface.request(args.serviceType, args.request);
        } catch (AuthorizationException authException) {
          result.authException = authException;
        } catch (RuntimeException runtimeException) {
          result.runtimeException = runtimeException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("validate", new validate());
      processMap.put("validate4Dw", new validate4Dw());
      processMap.put("setPrivileges", new setPrivileges());
      processMap.put("setPrivileges4Dw", new setPrivileges4Dw());
      processMap.put("request", new request());
      return processMap;
    }

    public static class validate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, validate_args, Reply> {
      public validate() {
        super("validate");
      }

      public validate_args getEmptyArgsInstance() {
        return new validate_args();
      }

      public AsyncMethodCallback<Reply> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Reply>() { 
          public void onComplete(Reply o) {
            validate_result result = new validate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            validate_result result = new validate_result();
            if (e instanceof AuthorizationException) {
                        result.authException = (AuthorizationException) e;
                        result.setAuthExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof RuntimeException) {
                        result.runtimeException = (RuntimeException) e;
                        result.setRuntimeExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, validate_args args, AsyncMethodCallback<Reply> resultHandler) throws TException {
        iface.validate(args.serviceType, args.user, args.data,resultHandler);
      }
    }

    public static class validate4Dw<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, validate4Dw_args, Reply> {
      public validate4Dw() {
        super("validate4Dw");
      }

      public validate4Dw_args getEmptyArgsInstance() {
        return new validate4Dw_args();
      }

      public AsyncMethodCallback<Reply> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Reply>() { 
          public void onComplete(Reply o) {
            validate4Dw_result result = new validate4Dw_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            validate4Dw_result result = new validate4Dw_result();
            if (e instanceof AuthorizationException) {
                        result.authException = (AuthorizationException) e;
                        result.setAuthExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof RuntimeException) {
                        result.runtimeException = (RuntimeException) e;
                        result.setRuntimeExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, validate4Dw_args args, AsyncMethodCallback<Reply> resultHandler) throws TException {
        iface.validate4Dw(args.serviceType, args.dwInfo, args.data,resultHandler);
      }
    }

    public static class setPrivileges<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setPrivileges_args, Reply> {
      public setPrivileges() {
        super("setPrivileges");
      }

      public setPrivileges_args getEmptyArgsInstance() {
        return new setPrivileges_args();
      }

      public AsyncMethodCallback<Reply> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Reply>() { 
          public void onComplete(Reply o) {
            setPrivileges_result result = new setPrivileges_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setPrivileges_result result = new setPrivileges_result();
            if (e instanceof AuthorizationException) {
                        result.authException = (AuthorizationException) e;
                        result.setAuthExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof RuntimeException) {
                        result.runtimeException = (RuntimeException) e;
                        result.setRuntimeExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setPrivileges_args args, AsyncMethodCallback<Reply> resultHandler) throws TException {
        iface.setPrivileges(args.serviceType, args.user, args.name, args.ntype, args.privilege,resultHandler);
      }
    }

    public static class setPrivileges4Dw<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setPrivileges4Dw_args, Reply> {
      public setPrivileges4Dw() {
        super("setPrivileges4Dw");
      }

      public setPrivileges4Dw_args getEmptyArgsInstance() {
        return new setPrivileges4Dw_args();
      }

      public AsyncMethodCallback<Reply> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Reply>() { 
          public void onComplete(Reply o) {
            setPrivileges4Dw_result result = new setPrivileges4Dw_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setPrivileges4Dw_result result = new setPrivileges4Dw_result();
            if (e instanceof AuthorizationException) {
                        result.authException = (AuthorizationException) e;
                        result.setAuthExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof RuntimeException) {
                        result.runtimeException = (RuntimeException) e;
                        result.setRuntimeExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setPrivileges4Dw_args args, AsyncMethodCallback<Reply> resultHandler) throws TException {
        iface.setPrivileges4Dw(args.serviceType, args.user, args.name, args.ntype, args.privilege,resultHandler);
      }
    }

    public static class request<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, request_args, Reply> {
      public request() {
        super("request");
      }

      public request_args getEmptyArgsInstance() {
        return new request_args();
      }

      public AsyncMethodCallback<Reply> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Reply>() { 
          public void onComplete(Reply o) {
            request_result result = new request_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            request_result result = new request_result();
            if (e instanceof AuthorizationException) {
                        result.authException = (AuthorizationException) e;
                        result.setAuthExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof RuntimeException) {
                        result.runtimeException = (RuntimeException) e;
                        result.setRuntimeExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, request_args args, AsyncMethodCallback<Reply> resultHandler) throws TException {
        iface.request(args.serviceType, args.request,resultHandler);
      }
    }

  }

  public static class validate_args implements org.apache.thrift.TBase<validate_args, validate_args._Fields>, java.io.Serializable, Cloneable, Comparable<validate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validate_args");

    private static final org.apache.thrift.protocol.TField SERVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.SET, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new validate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new validate_argsTupleSchemeFactory());
    }

    public String serviceType; // required
    public HiidoUser user; // required
    public Set<Obj> data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_TYPE((short)1, "serviceType"),
      USER((short)2, "user"),
      DATA((short)3, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_TYPE
            return SERVICE_TYPE;
          case 2: // USER
            return USER;
          case 3: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("serviceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HiidoUser.class)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Obj.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validate_args.class, metaDataMap);
    }

    public validate_args() {
    }

    public validate_args(
      String serviceType,
      HiidoUser user,
      Set<Obj> data)
    {
      this();
      this.serviceType = serviceType;
      this.user = user;
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validate_args(validate_args other) {
      if (other.isSetServiceType()) {
        this.serviceType = other.serviceType;
      }
      if (other.isSetUser()) {
        this.user = new HiidoUser(other.user);
      }
      if (other.isSetData()) {
        Set<Obj> __this__data = new HashSet<Obj>(other.data.size());
        for (Obj other_element : other.data) {
          __this__data.add(new Obj(other_element));
        }
        this.data = __this__data;
      }
    }

    public validate_args deepCopy() {
      return new validate_args(this);
    }

    @Override
    public void clear() {
      this.serviceType = null;
      this.user = null;
      this.data = null;
    }

    public String getServiceType() {
      return this.serviceType;
    }

    public validate_args setServiceType(String serviceType) {
      this.serviceType = serviceType;
      return this;
    }

    public void unsetServiceType() {
      this.serviceType = null;
    }

    /** Returns true if field serviceType is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceType() {
      return this.serviceType != null;
    }

    public void setServiceTypeIsSet(boolean value) {
      if (!value) {
        this.serviceType = null;
      }
    }

    public HiidoUser getUser() {
      return this.user;
    }

    public validate_args setUser(HiidoUser user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public int getDataSize() {
      return (this.data == null) ? 0 : this.data.size();
    }

    public java.util.Iterator<Obj> getDataIterator() {
      return (this.data == null) ? null : this.data.iterator();
    }

    public void addToData(Obj elem) {
      if (this.data == null) {
        this.data = new HashSet<Obj>();
      }
      this.data.add(elem);
    }

    public Set<Obj> getData() {
      return this.data;
    }

    public validate_args setData(Set<Obj> data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_TYPE:
        if (value == null) {
          unsetServiceType();
        } else {
          setServiceType((String)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((HiidoUser)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((Set<Obj>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_TYPE:
        return getServiceType();

      case USER:
        return getUser();

      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_TYPE:
        return isSetServiceType();
      case USER:
        return isSetUser();
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validate_args)
        return this.equals((validate_args)that);
      return false;
    }

    public boolean equals(validate_args that) {
      if (that == null)
        return false;

      boolean this_present_serviceType = true && this.isSetServiceType();
      boolean that_present_serviceType = true && that.isSetServiceType();
      if (this_present_serviceType || that_present_serviceType) {
        if (!(this_present_serviceType && that_present_serviceType))
          return false;
        if (!this.serviceType.equals(that.serviceType))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_serviceType = true && (isSetServiceType());
      list.add(present_serviceType);
      if (present_serviceType)
        list.add(serviceType);

      boolean present_user = true && (isSetUser());
      list.add(present_user);
      if (present_user)
        list.add(user);

      boolean present_data = true && (isSetData());
      list.add(present_data);
      if (present_data)
        list.add(data);

      return list.hashCode();
    }

    @Override
    public int compareTo(validate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetServiceType()).compareTo(other.isSetServiceType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceType, other.serviceType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validate_args(");
      boolean first = true;

      sb.append("serviceType:");
      if (this.serviceType == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (user != null) {
        user.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validate_argsStandardSchemeFactory implements SchemeFactory {
      public validate_argsStandardScheme getScheme() {
        return new validate_argsStandardScheme();
      }
    }

    private static class validate_argsStandardScheme extends StandardScheme<validate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validate_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVICE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceType = iprot.readString();
                struct.setServiceTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user = new HiidoUser();
                struct.user.read(iprot);
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                  struct.data = new HashSet<Obj>(2*_set0.size);
                  Obj _elem1;
                  for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                  {
                    _elem1 = new Obj();
                    _elem1.read(iprot);
                    struct.data.add(_elem1);
                  }
                  iprot.readSetEnd();
                }
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validate_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serviceType != null) {
          oprot.writeFieldBegin(SERVICE_TYPE_FIELD_DESC);
          oprot.writeString(struct.serviceType);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.data.size()));
            for (Obj _iter3 : struct.data)
            {
              _iter3.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validate_argsTupleSchemeFactory implements SchemeFactory {
      public validate_argsTupleScheme getScheme() {
        return new validate_argsTupleScheme();
      }
    }

    private static class validate_argsTupleScheme extends TupleScheme<validate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validate_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServiceType()) {
          optionals.set(0);
        }
        if (struct.isSetUser()) {
          optionals.set(1);
        }
        if (struct.isSetData()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetServiceType()) {
          oprot.writeString(struct.serviceType);
        }
        if (struct.isSetUser()) {
          struct.user.write(oprot);
        }
        if (struct.isSetData()) {
          {
            oprot.writeI32(struct.data.size());
            for (Obj _iter4 : struct.data)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validate_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.serviceType = iprot.readString();
          struct.setServiceTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user = new HiidoUser();
          struct.user.read(iprot);
          struct.setUserIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.data = new HashSet<Obj>(2*_set5.size);
            Obj _elem6;
            for (int _i7 = 0; _i7 < _set5.size; ++_i7)
            {
              _elem6 = new Obj();
              _elem6.read(iprot);
              struct.data.add(_elem6);
            }
          }
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class validate_result implements org.apache.thrift.TBase<validate_result, validate_result._Fields>, java.io.Serializable, Cloneable, Comparable<validate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AUTH_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RUNTIME_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("runtimeException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new validate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new validate_resultTupleSchemeFactory());
    }

    public Reply success; // required
    public AuthorizationException authException; // required
    public RuntimeException runtimeException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AUTH_EXCEPTION((short)1, "authException"),
      RUNTIME_EXCEPTION((short)2, "runtimeException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AUTH_EXCEPTION
            return AUTH_EXCEPTION;
          case 2: // RUNTIME_EXCEPTION
            return RUNTIME_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Reply.class)));
      tmpMap.put(_Fields.AUTH_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RUNTIME_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("runtimeException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validate_result.class, metaDataMap);
    }

    public validate_result() {
    }

    public validate_result(
      Reply success,
      AuthorizationException authException,
      RuntimeException runtimeException)
    {
      this();
      this.success = success;
      this.authException = authException;
      this.runtimeException = runtimeException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validate_result(validate_result other) {
      if (other.isSetSuccess()) {
        this.success = new Reply(other.success);
      }
      if (other.isSetAuthException()) {
        this.authException = new AuthorizationException(other.authException);
      }
      if (other.isSetRuntimeException()) {
        this.runtimeException = new RuntimeException(other.runtimeException);
      }
    }

    public validate_result deepCopy() {
      return new validate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.authException = null;
      this.runtimeException = null;
    }

    public Reply getSuccess() {
      return this.success;
    }

    public validate_result setSuccess(Reply success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public AuthorizationException getAuthException() {
      return this.authException;
    }

    public validate_result setAuthException(AuthorizationException authException) {
      this.authException = authException;
      return this;
    }

    public void unsetAuthException() {
      this.authException = null;
    }

    /** Returns true if field authException is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthException() {
      return this.authException != null;
    }

    public void setAuthExceptionIsSet(boolean value) {
      if (!value) {
        this.authException = null;
      }
    }

    public RuntimeException getRuntimeException() {
      return this.runtimeException;
    }

    public validate_result setRuntimeException(RuntimeException runtimeException) {
      this.runtimeException = runtimeException;
      return this;
    }

    public void unsetRuntimeException() {
      this.runtimeException = null;
    }

    /** Returns true if field runtimeException is set (has been assigned a value) and false otherwise */
    public boolean isSetRuntimeException() {
      return this.runtimeException != null;
    }

    public void setRuntimeExceptionIsSet(boolean value) {
      if (!value) {
        this.runtimeException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Reply)value);
        }
        break;

      case AUTH_EXCEPTION:
        if (value == null) {
          unsetAuthException();
        } else {
          setAuthException((AuthorizationException)value);
        }
        break;

      case RUNTIME_EXCEPTION:
        if (value == null) {
          unsetRuntimeException();
        } else {
          setRuntimeException((RuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AUTH_EXCEPTION:
        return getAuthException();

      case RUNTIME_EXCEPTION:
        return getRuntimeException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AUTH_EXCEPTION:
        return isSetAuthException();
      case RUNTIME_EXCEPTION:
        return isSetRuntimeException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validate_result)
        return this.equals((validate_result)that);
      return false;
    }

    public boolean equals(validate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_authException = true && this.isSetAuthException();
      boolean that_present_authException = true && that.isSetAuthException();
      if (this_present_authException || that_present_authException) {
        if (!(this_present_authException && that_present_authException))
          return false;
        if (!this.authException.equals(that.authException))
          return false;
      }

      boolean this_present_runtimeException = true && this.isSetRuntimeException();
      boolean that_present_runtimeException = true && that.isSetRuntimeException();
      if (this_present_runtimeException || that_present_runtimeException) {
        if (!(this_present_runtimeException && that_present_runtimeException))
          return false;
        if (!this.runtimeException.equals(that.runtimeException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_authException = true && (isSetAuthException());
      list.add(present_authException);
      if (present_authException)
        list.add(authException);

      boolean present_runtimeException = true && (isSetRuntimeException());
      list.add(present_runtimeException);
      if (present_runtimeException)
        list.add(runtimeException);

      return list.hashCode();
    }

    @Override
    public int compareTo(validate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthException()).compareTo(other.isSetAuthException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authException, other.authException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuntimeException()).compareTo(other.isSetRuntimeException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuntimeException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtimeException, other.runtimeException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authException:");
      if (this.authException == null) {
        sb.append("null");
      } else {
        sb.append(this.authException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("runtimeException:");
      if (this.runtimeException == null) {
        sb.append("null");
      } else {
        sb.append(this.runtimeException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validate_resultStandardSchemeFactory implements SchemeFactory {
      public validate_resultStandardScheme getScheme() {
        return new validate_resultStandardScheme();
      }
    }

    private static class validate_resultStandardScheme extends StandardScheme<validate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validate_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Reply();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AUTH_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authException = new AuthorizationException();
                struct.authException.read(iprot);
                struct.setAuthExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RUNTIME_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.runtimeException = new RuntimeException();
                struct.runtimeException.read(iprot);
                struct.setRuntimeExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validate_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authException != null) {
          oprot.writeFieldBegin(AUTH_EXCEPTION_FIELD_DESC);
          struct.authException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.runtimeException != null) {
          oprot.writeFieldBegin(RUNTIME_EXCEPTION_FIELD_DESC);
          struct.runtimeException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validate_resultTupleSchemeFactory implements SchemeFactory {
      public validate_resultTupleScheme getScheme() {
        return new validate_resultTupleScheme();
      }
    }

    private static class validate_resultTupleScheme extends TupleScheme<validate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validate_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAuthException()) {
          optionals.set(1);
        }
        if (struct.isSetRuntimeException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAuthException()) {
          struct.authException.write(oprot);
        }
        if (struct.isSetRuntimeException()) {
          struct.runtimeException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validate_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new Reply();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.authException = new AuthorizationException();
          struct.authException.read(iprot);
          struct.setAuthExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.runtimeException = new RuntimeException();
          struct.runtimeException.read(iprot);
          struct.setRuntimeExceptionIsSet(true);
        }
      }
    }

  }

  public static class validate4Dw_args implements org.apache.thrift.TBase<validate4Dw_args, validate4Dw_args._Fields>, java.io.Serializable, Cloneable, Comparable<validate4Dw_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validate4Dw_args");

    private static final org.apache.thrift.protocol.TField SERVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DW_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("dwInfo", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.SET, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new validate4Dw_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new validate4Dw_argsTupleSchemeFactory());
    }

    public String serviceType; // required
    public String dwInfo; // required
    public Set<Obj> data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_TYPE((short)1, "serviceType"),
      DW_INFO((short)2, "dwInfo"),
      DATA((short)3, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_TYPE
            return SERVICE_TYPE;
          case 2: // DW_INFO
            return DW_INFO;
          case 3: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("serviceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DW_INFO, new org.apache.thrift.meta_data.FieldMetaData("dwInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Obj.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validate4Dw_args.class, metaDataMap);
    }

    public validate4Dw_args() {
    }

    public validate4Dw_args(
      String serviceType,
      String dwInfo,
      Set<Obj> data)
    {
      this();
      this.serviceType = serviceType;
      this.dwInfo = dwInfo;
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validate4Dw_args(validate4Dw_args other) {
      if (other.isSetServiceType()) {
        this.serviceType = other.serviceType;
      }
      if (other.isSetDwInfo()) {
        this.dwInfo = other.dwInfo;
      }
      if (other.isSetData()) {
        Set<Obj> __this__data = new HashSet<Obj>(other.data.size());
        for (Obj other_element : other.data) {
          __this__data.add(new Obj(other_element));
        }
        this.data = __this__data;
      }
    }

    public validate4Dw_args deepCopy() {
      return new validate4Dw_args(this);
    }

    @Override
    public void clear() {
      this.serviceType = null;
      this.dwInfo = null;
      this.data = null;
    }

    public String getServiceType() {
      return this.serviceType;
    }

    public validate4Dw_args setServiceType(String serviceType) {
      this.serviceType = serviceType;
      return this;
    }

    public void unsetServiceType() {
      this.serviceType = null;
    }

    /** Returns true if field serviceType is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceType() {
      return this.serviceType != null;
    }

    public void setServiceTypeIsSet(boolean value) {
      if (!value) {
        this.serviceType = null;
      }
    }

    public String getDwInfo() {
      return this.dwInfo;
    }

    public validate4Dw_args setDwInfo(String dwInfo) {
      this.dwInfo = dwInfo;
      return this;
    }

    public void unsetDwInfo() {
      this.dwInfo = null;
    }

    /** Returns true if field dwInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetDwInfo() {
      return this.dwInfo != null;
    }

    public void setDwInfoIsSet(boolean value) {
      if (!value) {
        this.dwInfo = null;
      }
    }

    public int getDataSize() {
      return (this.data == null) ? 0 : this.data.size();
    }

    public java.util.Iterator<Obj> getDataIterator() {
      return (this.data == null) ? null : this.data.iterator();
    }

    public void addToData(Obj elem) {
      if (this.data == null) {
        this.data = new HashSet<Obj>();
      }
      this.data.add(elem);
    }

    public Set<Obj> getData() {
      return this.data;
    }

    public validate4Dw_args setData(Set<Obj> data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_TYPE:
        if (value == null) {
          unsetServiceType();
        } else {
          setServiceType((String)value);
        }
        break;

      case DW_INFO:
        if (value == null) {
          unsetDwInfo();
        } else {
          setDwInfo((String)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((Set<Obj>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_TYPE:
        return getServiceType();

      case DW_INFO:
        return getDwInfo();

      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_TYPE:
        return isSetServiceType();
      case DW_INFO:
        return isSetDwInfo();
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validate4Dw_args)
        return this.equals((validate4Dw_args)that);
      return false;
    }

    public boolean equals(validate4Dw_args that) {
      if (that == null)
        return false;

      boolean this_present_serviceType = true && this.isSetServiceType();
      boolean that_present_serviceType = true && that.isSetServiceType();
      if (this_present_serviceType || that_present_serviceType) {
        if (!(this_present_serviceType && that_present_serviceType))
          return false;
        if (!this.serviceType.equals(that.serviceType))
          return false;
      }

      boolean this_present_dwInfo = true && this.isSetDwInfo();
      boolean that_present_dwInfo = true && that.isSetDwInfo();
      if (this_present_dwInfo || that_present_dwInfo) {
        if (!(this_present_dwInfo && that_present_dwInfo))
          return false;
        if (!this.dwInfo.equals(that.dwInfo))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_serviceType = true && (isSetServiceType());
      list.add(present_serviceType);
      if (present_serviceType)
        list.add(serviceType);

      boolean present_dwInfo = true && (isSetDwInfo());
      list.add(present_dwInfo);
      if (present_dwInfo)
        list.add(dwInfo);

      boolean present_data = true && (isSetData());
      list.add(present_data);
      if (present_data)
        list.add(data);

      return list.hashCode();
    }

    @Override
    public int compareTo(validate4Dw_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetServiceType()).compareTo(other.isSetServiceType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceType, other.serviceType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDwInfo()).compareTo(other.isSetDwInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDwInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dwInfo, other.dwInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validate4Dw_args(");
      boolean first = true;

      sb.append("serviceType:");
      if (this.serviceType == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dwInfo:");
      if (this.dwInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.dwInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validate4Dw_argsStandardSchemeFactory implements SchemeFactory {
      public validate4Dw_argsStandardScheme getScheme() {
        return new validate4Dw_argsStandardScheme();
      }
    }

    private static class validate4Dw_argsStandardScheme extends StandardScheme<validate4Dw_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validate4Dw_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVICE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceType = iprot.readString();
                struct.setServiceTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DW_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dwInfo = iprot.readString();
                struct.setDwInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set8 = iprot.readSetBegin();
                  struct.data = new HashSet<Obj>(2*_set8.size);
                  Obj _elem9;
                  for (int _i10 = 0; _i10 < _set8.size; ++_i10)
                  {
                    _elem9 = new Obj();
                    _elem9.read(iprot);
                    struct.data.add(_elem9);
                  }
                  iprot.readSetEnd();
                }
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validate4Dw_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serviceType != null) {
          oprot.writeFieldBegin(SERVICE_TYPE_FIELD_DESC);
          oprot.writeString(struct.serviceType);
          oprot.writeFieldEnd();
        }
        if (struct.dwInfo != null) {
          oprot.writeFieldBegin(DW_INFO_FIELD_DESC);
          oprot.writeString(struct.dwInfo);
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.data.size()));
            for (Obj _iter11 : struct.data)
            {
              _iter11.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validate4Dw_argsTupleSchemeFactory implements SchemeFactory {
      public validate4Dw_argsTupleScheme getScheme() {
        return new validate4Dw_argsTupleScheme();
      }
    }

    private static class validate4Dw_argsTupleScheme extends TupleScheme<validate4Dw_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validate4Dw_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServiceType()) {
          optionals.set(0);
        }
        if (struct.isSetDwInfo()) {
          optionals.set(1);
        }
        if (struct.isSetData()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetServiceType()) {
          oprot.writeString(struct.serviceType);
        }
        if (struct.isSetDwInfo()) {
          oprot.writeString(struct.dwInfo);
        }
        if (struct.isSetData()) {
          {
            oprot.writeI32(struct.data.size());
            for (Obj _iter12 : struct.data)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validate4Dw_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.serviceType = iprot.readString();
          struct.setServiceTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dwInfo = iprot.readString();
          struct.setDwInfoIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TSet _set13 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.data = new HashSet<Obj>(2*_set13.size);
            Obj _elem14;
            for (int _i15 = 0; _i15 < _set13.size; ++_i15)
            {
              _elem14 = new Obj();
              _elem14.read(iprot);
              struct.data.add(_elem14);
            }
          }
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class validate4Dw_result implements org.apache.thrift.TBase<validate4Dw_result, validate4Dw_result._Fields>, java.io.Serializable, Cloneable, Comparable<validate4Dw_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validate4Dw_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AUTH_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RUNTIME_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("runtimeException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new validate4Dw_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new validate4Dw_resultTupleSchemeFactory());
    }

    public Reply success; // required
    public AuthorizationException authException; // required
    public RuntimeException runtimeException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AUTH_EXCEPTION((short)1, "authException"),
      RUNTIME_EXCEPTION((short)2, "runtimeException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AUTH_EXCEPTION
            return AUTH_EXCEPTION;
          case 2: // RUNTIME_EXCEPTION
            return RUNTIME_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Reply.class)));
      tmpMap.put(_Fields.AUTH_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RUNTIME_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("runtimeException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validate4Dw_result.class, metaDataMap);
    }

    public validate4Dw_result() {
    }

    public validate4Dw_result(
      Reply success,
      AuthorizationException authException,
      RuntimeException runtimeException)
    {
      this();
      this.success = success;
      this.authException = authException;
      this.runtimeException = runtimeException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validate4Dw_result(validate4Dw_result other) {
      if (other.isSetSuccess()) {
        this.success = new Reply(other.success);
      }
      if (other.isSetAuthException()) {
        this.authException = new AuthorizationException(other.authException);
      }
      if (other.isSetRuntimeException()) {
        this.runtimeException = new RuntimeException(other.runtimeException);
      }
    }

    public validate4Dw_result deepCopy() {
      return new validate4Dw_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.authException = null;
      this.runtimeException = null;
    }

    public Reply getSuccess() {
      return this.success;
    }

    public validate4Dw_result setSuccess(Reply success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public AuthorizationException getAuthException() {
      return this.authException;
    }

    public validate4Dw_result setAuthException(AuthorizationException authException) {
      this.authException = authException;
      return this;
    }

    public void unsetAuthException() {
      this.authException = null;
    }

    /** Returns true if field authException is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthException() {
      return this.authException != null;
    }

    public void setAuthExceptionIsSet(boolean value) {
      if (!value) {
        this.authException = null;
      }
    }

    public RuntimeException getRuntimeException() {
      return this.runtimeException;
    }

    public validate4Dw_result setRuntimeException(RuntimeException runtimeException) {
      this.runtimeException = runtimeException;
      return this;
    }

    public void unsetRuntimeException() {
      this.runtimeException = null;
    }

    /** Returns true if field runtimeException is set (has been assigned a value) and false otherwise */
    public boolean isSetRuntimeException() {
      return this.runtimeException != null;
    }

    public void setRuntimeExceptionIsSet(boolean value) {
      if (!value) {
        this.runtimeException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Reply)value);
        }
        break;

      case AUTH_EXCEPTION:
        if (value == null) {
          unsetAuthException();
        } else {
          setAuthException((AuthorizationException)value);
        }
        break;

      case RUNTIME_EXCEPTION:
        if (value == null) {
          unsetRuntimeException();
        } else {
          setRuntimeException((RuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AUTH_EXCEPTION:
        return getAuthException();

      case RUNTIME_EXCEPTION:
        return getRuntimeException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AUTH_EXCEPTION:
        return isSetAuthException();
      case RUNTIME_EXCEPTION:
        return isSetRuntimeException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validate4Dw_result)
        return this.equals((validate4Dw_result)that);
      return false;
    }

    public boolean equals(validate4Dw_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_authException = true && this.isSetAuthException();
      boolean that_present_authException = true && that.isSetAuthException();
      if (this_present_authException || that_present_authException) {
        if (!(this_present_authException && that_present_authException))
          return false;
        if (!this.authException.equals(that.authException))
          return false;
      }

      boolean this_present_runtimeException = true && this.isSetRuntimeException();
      boolean that_present_runtimeException = true && that.isSetRuntimeException();
      if (this_present_runtimeException || that_present_runtimeException) {
        if (!(this_present_runtimeException && that_present_runtimeException))
          return false;
        if (!this.runtimeException.equals(that.runtimeException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_authException = true && (isSetAuthException());
      list.add(present_authException);
      if (present_authException)
        list.add(authException);

      boolean present_runtimeException = true && (isSetRuntimeException());
      list.add(present_runtimeException);
      if (present_runtimeException)
        list.add(runtimeException);

      return list.hashCode();
    }

    @Override
    public int compareTo(validate4Dw_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthException()).compareTo(other.isSetAuthException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authException, other.authException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuntimeException()).compareTo(other.isSetRuntimeException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuntimeException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtimeException, other.runtimeException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validate4Dw_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authException:");
      if (this.authException == null) {
        sb.append("null");
      } else {
        sb.append(this.authException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("runtimeException:");
      if (this.runtimeException == null) {
        sb.append("null");
      } else {
        sb.append(this.runtimeException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validate4Dw_resultStandardSchemeFactory implements SchemeFactory {
      public validate4Dw_resultStandardScheme getScheme() {
        return new validate4Dw_resultStandardScheme();
      }
    }

    private static class validate4Dw_resultStandardScheme extends StandardScheme<validate4Dw_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validate4Dw_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Reply();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AUTH_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authException = new AuthorizationException();
                struct.authException.read(iprot);
                struct.setAuthExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RUNTIME_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.runtimeException = new RuntimeException();
                struct.runtimeException.read(iprot);
                struct.setRuntimeExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validate4Dw_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authException != null) {
          oprot.writeFieldBegin(AUTH_EXCEPTION_FIELD_DESC);
          struct.authException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.runtimeException != null) {
          oprot.writeFieldBegin(RUNTIME_EXCEPTION_FIELD_DESC);
          struct.runtimeException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validate4Dw_resultTupleSchemeFactory implements SchemeFactory {
      public validate4Dw_resultTupleScheme getScheme() {
        return new validate4Dw_resultTupleScheme();
      }
    }

    private static class validate4Dw_resultTupleScheme extends TupleScheme<validate4Dw_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validate4Dw_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAuthException()) {
          optionals.set(1);
        }
        if (struct.isSetRuntimeException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAuthException()) {
          struct.authException.write(oprot);
        }
        if (struct.isSetRuntimeException()) {
          struct.runtimeException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validate4Dw_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new Reply();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.authException = new AuthorizationException();
          struct.authException.read(iprot);
          struct.setAuthExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.runtimeException = new RuntimeException();
          struct.runtimeException.read(iprot);
          struct.setRuntimeExceptionIsSet(true);
        }
      }
    }

  }

  public static class setPrivileges_args implements org.apache.thrift.TBase<setPrivileges_args, setPrivileges_args._Fields>, java.io.Serializable, Cloneable, Comparable<setPrivileges_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPrivileges_args");

    private static final org.apache.thrift.protocol.TField SERVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField NTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ntype", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PRIVILEGE_FIELD_DESC = new org.apache.thrift.protocol.TField("privilege", org.apache.thrift.protocol.TType.BYTE, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPrivileges_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPrivileges_argsTupleSchemeFactory());
    }

    public String serviceType; // required
    public int user; // required
    public String name; // required
    public String ntype; // required
    public byte privilege; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_TYPE((short)1, "serviceType"),
      USER((short)2, "user"),
      NAME((short)3, "name"),
      NTYPE((short)4, "ntype"),
      PRIVILEGE((short)5, "privilege");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_TYPE
            return SERVICE_TYPE;
          case 2: // USER
            return USER;
          case 3: // NAME
            return NAME;
          case 4: // NTYPE
            return NTYPE;
          case 5: // PRIVILEGE
            return PRIVILEGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USER_ISSET_ID = 0;
    private static final int __PRIVILEGE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("serviceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NTYPE, new org.apache.thrift.meta_data.FieldMetaData("ntype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRIVILEGE, new org.apache.thrift.meta_data.FieldMetaData("privilege", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPrivileges_args.class, metaDataMap);
    }

    public setPrivileges_args() {
    }

    public setPrivileges_args(
      String serviceType,
      int user,
      String name,
      String ntype,
      byte privilege)
    {
      this();
      this.serviceType = serviceType;
      this.user = user;
      setUserIsSet(true);
      this.name = name;
      this.ntype = ntype;
      this.privilege = privilege;
      setPrivilegeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPrivileges_args(setPrivileges_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetServiceType()) {
        this.serviceType = other.serviceType;
      }
      this.user = other.user;
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetNtype()) {
        this.ntype = other.ntype;
      }
      this.privilege = other.privilege;
    }

    public setPrivileges_args deepCopy() {
      return new setPrivileges_args(this);
    }

    @Override
    public void clear() {
      this.serviceType = null;
      setUserIsSet(false);
      this.user = 0;
      this.name = null;
      this.ntype = null;
      setPrivilegeIsSet(false);
      this.privilege = 0;
    }

    public String getServiceType() {
      return this.serviceType;
    }

    public setPrivileges_args setServiceType(String serviceType) {
      this.serviceType = serviceType;
      return this;
    }

    public void unsetServiceType() {
      this.serviceType = null;
    }

    /** Returns true if field serviceType is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceType() {
      return this.serviceType != null;
    }

    public void setServiceTypeIsSet(boolean value) {
      if (!value) {
        this.serviceType = null;
      }
    }

    public int getUser() {
      return this.user;
    }

    public setPrivileges_args setUser(int user) {
      this.user = user;
      setUserIsSet(true);
      return this;
    }

    public void unsetUser() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USER_ISSET_ID);
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return EncodingUtils.testBit(__isset_bitfield, __USER_ISSET_ID);
    }

    public void setUserIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USER_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public setPrivileges_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getNtype() {
      return this.ntype;
    }

    public setPrivileges_args setNtype(String ntype) {
      this.ntype = ntype;
      return this;
    }

    public void unsetNtype() {
      this.ntype = null;
    }

    /** Returns true if field ntype is set (has been assigned a value) and false otherwise */
    public boolean isSetNtype() {
      return this.ntype != null;
    }

    public void setNtypeIsSet(boolean value) {
      if (!value) {
        this.ntype = null;
      }
    }

    public byte getPrivilege() {
      return this.privilege;
    }

    public setPrivileges_args setPrivilege(byte privilege) {
      this.privilege = privilege;
      setPrivilegeIsSet(true);
      return this;
    }

    public void unsetPrivilege() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIVILEGE_ISSET_ID);
    }

    /** Returns true if field privilege is set (has been assigned a value) and false otherwise */
    public boolean isSetPrivilege() {
      return EncodingUtils.testBit(__isset_bitfield, __PRIVILEGE_ISSET_ID);
    }

    public void setPrivilegeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIVILEGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_TYPE:
        if (value == null) {
          unsetServiceType();
        } else {
          setServiceType((String)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((Integer)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case NTYPE:
        if (value == null) {
          unsetNtype();
        } else {
          setNtype((String)value);
        }
        break;

      case PRIVILEGE:
        if (value == null) {
          unsetPrivilege();
        } else {
          setPrivilege((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_TYPE:
        return getServiceType();

      case USER:
        return getUser();

      case NAME:
        return getName();

      case NTYPE:
        return getNtype();

      case PRIVILEGE:
        return getPrivilege();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_TYPE:
        return isSetServiceType();
      case USER:
        return isSetUser();
      case NAME:
        return isSetName();
      case NTYPE:
        return isSetNtype();
      case PRIVILEGE:
        return isSetPrivilege();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPrivileges_args)
        return this.equals((setPrivileges_args)that);
      return false;
    }

    public boolean equals(setPrivileges_args that) {
      if (that == null)
        return false;

      boolean this_present_serviceType = true && this.isSetServiceType();
      boolean that_present_serviceType = true && that.isSetServiceType();
      if (this_present_serviceType || that_present_serviceType) {
        if (!(this_present_serviceType && that_present_serviceType))
          return false;
        if (!this.serviceType.equals(that.serviceType))
          return false;
      }

      boolean this_present_user = true;
      boolean that_present_user = true;
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (this.user != that.user)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_ntype = true && this.isSetNtype();
      boolean that_present_ntype = true && that.isSetNtype();
      if (this_present_ntype || that_present_ntype) {
        if (!(this_present_ntype && that_present_ntype))
          return false;
        if (!this.ntype.equals(that.ntype))
          return false;
      }

      boolean this_present_privilege = true;
      boolean that_present_privilege = true;
      if (this_present_privilege || that_present_privilege) {
        if (!(this_present_privilege && that_present_privilege))
          return false;
        if (this.privilege != that.privilege)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_serviceType = true && (isSetServiceType());
      list.add(present_serviceType);
      if (present_serviceType)
        list.add(serviceType);

      boolean present_user = true;
      list.add(present_user);
      if (present_user)
        list.add(user);

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_ntype = true && (isSetNtype());
      list.add(present_ntype);
      if (present_ntype)
        list.add(ntype);

      boolean present_privilege = true;
      list.add(present_privilege);
      if (present_privilege)
        list.add(privilege);

      return list.hashCode();
    }

    @Override
    public int compareTo(setPrivileges_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetServiceType()).compareTo(other.isSetServiceType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceType, other.serviceType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNtype()).compareTo(other.isSetNtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ntype, other.ntype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrivilege()).compareTo(other.isSetPrivilege());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrivilege()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privilege, other.privilege);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPrivileges_args(");
      boolean first = true;

      sb.append("serviceType:");
      if (this.serviceType == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      sb.append(this.user);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ntype:");
      if (this.ntype == null) {
        sb.append("null");
      } else {
        sb.append(this.ntype);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("privilege:");
      sb.append(this.privilege);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPrivileges_argsStandardSchemeFactory implements SchemeFactory {
      public setPrivileges_argsStandardScheme getScheme() {
        return new setPrivileges_argsStandardScheme();
      }
    }

    private static class setPrivileges_argsStandardScheme extends StandardScheme<setPrivileges_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPrivileges_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVICE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceType = iprot.readString();
                struct.setServiceTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.user = iprot.readI32();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NTYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ntype = iprot.readString();
                struct.setNtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PRIVILEGE
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.privilege = iprot.readByte();
                struct.setPrivilegeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPrivileges_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serviceType != null) {
          oprot.writeFieldBegin(SERVICE_TYPE_FIELD_DESC);
          oprot.writeString(struct.serviceType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeI32(struct.user);
        oprot.writeFieldEnd();
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.ntype != null) {
          oprot.writeFieldBegin(NTYPE_FIELD_DESC);
          oprot.writeString(struct.ntype);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRIVILEGE_FIELD_DESC);
        oprot.writeByte(struct.privilege);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPrivileges_argsTupleSchemeFactory implements SchemeFactory {
      public setPrivileges_argsTupleScheme getScheme() {
        return new setPrivileges_argsTupleScheme();
      }
    }

    private static class setPrivileges_argsTupleScheme extends TupleScheme<setPrivileges_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPrivileges_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServiceType()) {
          optionals.set(0);
        }
        if (struct.isSetUser()) {
          optionals.set(1);
        }
        if (struct.isSetName()) {
          optionals.set(2);
        }
        if (struct.isSetNtype()) {
          optionals.set(3);
        }
        if (struct.isSetPrivilege()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetServiceType()) {
          oprot.writeString(struct.serviceType);
        }
        if (struct.isSetUser()) {
          oprot.writeI32(struct.user);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetNtype()) {
          oprot.writeString(struct.ntype);
        }
        if (struct.isSetPrivilege()) {
          oprot.writeByte(struct.privilege);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPrivileges_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.serviceType = iprot.readString();
          struct.setServiceTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user = iprot.readI32();
          struct.setUserIsSet(true);
        }
        if (incoming.get(2)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ntype = iprot.readString();
          struct.setNtypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.privilege = iprot.readByte();
          struct.setPrivilegeIsSet(true);
        }
      }
    }

  }

  public static class setPrivileges_result implements org.apache.thrift.TBase<setPrivileges_result, setPrivileges_result._Fields>, java.io.Serializable, Cloneable, Comparable<setPrivileges_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPrivileges_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AUTH_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RUNTIME_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("runtimeException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPrivileges_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPrivileges_resultTupleSchemeFactory());
    }

    public Reply success; // required
    public AuthorizationException authException; // required
    public RuntimeException runtimeException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AUTH_EXCEPTION((short)1, "authException"),
      RUNTIME_EXCEPTION((short)2, "runtimeException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AUTH_EXCEPTION
            return AUTH_EXCEPTION;
          case 2: // RUNTIME_EXCEPTION
            return RUNTIME_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Reply.class)));
      tmpMap.put(_Fields.AUTH_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RUNTIME_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("runtimeException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPrivileges_result.class, metaDataMap);
    }

    public setPrivileges_result() {
    }

    public setPrivileges_result(
      Reply success,
      AuthorizationException authException,
      RuntimeException runtimeException)
    {
      this();
      this.success = success;
      this.authException = authException;
      this.runtimeException = runtimeException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPrivileges_result(setPrivileges_result other) {
      if (other.isSetSuccess()) {
        this.success = new Reply(other.success);
      }
      if (other.isSetAuthException()) {
        this.authException = new AuthorizationException(other.authException);
      }
      if (other.isSetRuntimeException()) {
        this.runtimeException = new RuntimeException(other.runtimeException);
      }
    }

    public setPrivileges_result deepCopy() {
      return new setPrivileges_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.authException = null;
      this.runtimeException = null;
    }

    public Reply getSuccess() {
      return this.success;
    }

    public setPrivileges_result setSuccess(Reply success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public AuthorizationException getAuthException() {
      return this.authException;
    }

    public setPrivileges_result setAuthException(AuthorizationException authException) {
      this.authException = authException;
      return this;
    }

    public void unsetAuthException() {
      this.authException = null;
    }

    /** Returns true if field authException is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthException() {
      return this.authException != null;
    }

    public void setAuthExceptionIsSet(boolean value) {
      if (!value) {
        this.authException = null;
      }
    }

    public RuntimeException getRuntimeException() {
      return this.runtimeException;
    }

    public setPrivileges_result setRuntimeException(RuntimeException runtimeException) {
      this.runtimeException = runtimeException;
      return this;
    }

    public void unsetRuntimeException() {
      this.runtimeException = null;
    }

    /** Returns true if field runtimeException is set (has been assigned a value) and false otherwise */
    public boolean isSetRuntimeException() {
      return this.runtimeException != null;
    }

    public void setRuntimeExceptionIsSet(boolean value) {
      if (!value) {
        this.runtimeException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Reply)value);
        }
        break;

      case AUTH_EXCEPTION:
        if (value == null) {
          unsetAuthException();
        } else {
          setAuthException((AuthorizationException)value);
        }
        break;

      case RUNTIME_EXCEPTION:
        if (value == null) {
          unsetRuntimeException();
        } else {
          setRuntimeException((RuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AUTH_EXCEPTION:
        return getAuthException();

      case RUNTIME_EXCEPTION:
        return getRuntimeException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AUTH_EXCEPTION:
        return isSetAuthException();
      case RUNTIME_EXCEPTION:
        return isSetRuntimeException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPrivileges_result)
        return this.equals((setPrivileges_result)that);
      return false;
    }

    public boolean equals(setPrivileges_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_authException = true && this.isSetAuthException();
      boolean that_present_authException = true && that.isSetAuthException();
      if (this_present_authException || that_present_authException) {
        if (!(this_present_authException && that_present_authException))
          return false;
        if (!this.authException.equals(that.authException))
          return false;
      }

      boolean this_present_runtimeException = true && this.isSetRuntimeException();
      boolean that_present_runtimeException = true && that.isSetRuntimeException();
      if (this_present_runtimeException || that_present_runtimeException) {
        if (!(this_present_runtimeException && that_present_runtimeException))
          return false;
        if (!this.runtimeException.equals(that.runtimeException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_authException = true && (isSetAuthException());
      list.add(present_authException);
      if (present_authException)
        list.add(authException);

      boolean present_runtimeException = true && (isSetRuntimeException());
      list.add(present_runtimeException);
      if (present_runtimeException)
        list.add(runtimeException);

      return list.hashCode();
    }

    @Override
    public int compareTo(setPrivileges_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthException()).compareTo(other.isSetAuthException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authException, other.authException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuntimeException()).compareTo(other.isSetRuntimeException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuntimeException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtimeException, other.runtimeException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPrivileges_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authException:");
      if (this.authException == null) {
        sb.append("null");
      } else {
        sb.append(this.authException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("runtimeException:");
      if (this.runtimeException == null) {
        sb.append("null");
      } else {
        sb.append(this.runtimeException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPrivileges_resultStandardSchemeFactory implements SchemeFactory {
      public setPrivileges_resultStandardScheme getScheme() {
        return new setPrivileges_resultStandardScheme();
      }
    }

    private static class setPrivileges_resultStandardScheme extends StandardScheme<setPrivileges_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPrivileges_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Reply();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AUTH_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authException = new AuthorizationException();
                struct.authException.read(iprot);
                struct.setAuthExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RUNTIME_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.runtimeException = new RuntimeException();
                struct.runtimeException.read(iprot);
                struct.setRuntimeExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPrivileges_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authException != null) {
          oprot.writeFieldBegin(AUTH_EXCEPTION_FIELD_DESC);
          struct.authException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.runtimeException != null) {
          oprot.writeFieldBegin(RUNTIME_EXCEPTION_FIELD_DESC);
          struct.runtimeException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPrivileges_resultTupleSchemeFactory implements SchemeFactory {
      public setPrivileges_resultTupleScheme getScheme() {
        return new setPrivileges_resultTupleScheme();
      }
    }

    private static class setPrivileges_resultTupleScheme extends TupleScheme<setPrivileges_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPrivileges_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAuthException()) {
          optionals.set(1);
        }
        if (struct.isSetRuntimeException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAuthException()) {
          struct.authException.write(oprot);
        }
        if (struct.isSetRuntimeException()) {
          struct.runtimeException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPrivileges_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new Reply();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.authException = new AuthorizationException();
          struct.authException.read(iprot);
          struct.setAuthExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.runtimeException = new RuntimeException();
          struct.runtimeException.read(iprot);
          struct.setRuntimeExceptionIsSet(true);
        }
      }
    }

  }

  public static class setPrivileges4Dw_args implements org.apache.thrift.TBase<setPrivileges4Dw_args, setPrivileges4Dw_args._Fields>, java.io.Serializable, Cloneable, Comparable<setPrivileges4Dw_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPrivileges4Dw_args");

    private static final org.apache.thrift.protocol.TField SERVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField NTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ntype", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PRIVILEGE_FIELD_DESC = new org.apache.thrift.protocol.TField("privilege", org.apache.thrift.protocol.TType.BYTE, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPrivileges4Dw_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPrivileges4Dw_argsTupleSchemeFactory());
    }

    public String serviceType; // required
    public String user; // required
    public String name; // required
    public String ntype; // required
    public byte privilege; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_TYPE((short)1, "serviceType"),
      USER((short)2, "user"),
      NAME((short)3, "name"),
      NTYPE((short)4, "ntype"),
      PRIVILEGE((short)5, "privilege");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_TYPE
            return SERVICE_TYPE;
          case 2: // USER
            return USER;
          case 3: // NAME
            return NAME;
          case 4: // NTYPE
            return NTYPE;
          case 5: // PRIVILEGE
            return PRIVILEGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRIVILEGE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("serviceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NTYPE, new org.apache.thrift.meta_data.FieldMetaData("ntype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRIVILEGE, new org.apache.thrift.meta_data.FieldMetaData("privilege", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPrivileges4Dw_args.class, metaDataMap);
    }

    public setPrivileges4Dw_args() {
    }

    public setPrivileges4Dw_args(
      String serviceType,
      String user,
      String name,
      String ntype,
      byte privilege)
    {
      this();
      this.serviceType = serviceType;
      this.user = user;
      this.name = name;
      this.ntype = ntype;
      this.privilege = privilege;
      setPrivilegeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPrivileges4Dw_args(setPrivileges4Dw_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetServiceType()) {
        this.serviceType = other.serviceType;
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetNtype()) {
        this.ntype = other.ntype;
      }
      this.privilege = other.privilege;
    }

    public setPrivileges4Dw_args deepCopy() {
      return new setPrivileges4Dw_args(this);
    }

    @Override
    public void clear() {
      this.serviceType = null;
      this.user = null;
      this.name = null;
      this.ntype = null;
      setPrivilegeIsSet(false);
      this.privilege = 0;
    }

    public String getServiceType() {
      return this.serviceType;
    }

    public setPrivileges4Dw_args setServiceType(String serviceType) {
      this.serviceType = serviceType;
      return this;
    }

    public void unsetServiceType() {
      this.serviceType = null;
    }

    /** Returns true if field serviceType is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceType() {
      return this.serviceType != null;
    }

    public void setServiceTypeIsSet(boolean value) {
      if (!value) {
        this.serviceType = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public setPrivileges4Dw_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public setPrivileges4Dw_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getNtype() {
      return this.ntype;
    }

    public setPrivileges4Dw_args setNtype(String ntype) {
      this.ntype = ntype;
      return this;
    }

    public void unsetNtype() {
      this.ntype = null;
    }

    /** Returns true if field ntype is set (has been assigned a value) and false otherwise */
    public boolean isSetNtype() {
      return this.ntype != null;
    }

    public void setNtypeIsSet(boolean value) {
      if (!value) {
        this.ntype = null;
      }
    }

    public byte getPrivilege() {
      return this.privilege;
    }

    public setPrivileges4Dw_args setPrivilege(byte privilege) {
      this.privilege = privilege;
      setPrivilegeIsSet(true);
      return this;
    }

    public void unsetPrivilege() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIVILEGE_ISSET_ID);
    }

    /** Returns true if field privilege is set (has been assigned a value) and false otherwise */
    public boolean isSetPrivilege() {
      return EncodingUtils.testBit(__isset_bitfield, __PRIVILEGE_ISSET_ID);
    }

    public void setPrivilegeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIVILEGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_TYPE:
        if (value == null) {
          unsetServiceType();
        } else {
          setServiceType((String)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case NTYPE:
        if (value == null) {
          unsetNtype();
        } else {
          setNtype((String)value);
        }
        break;

      case PRIVILEGE:
        if (value == null) {
          unsetPrivilege();
        } else {
          setPrivilege((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_TYPE:
        return getServiceType();

      case USER:
        return getUser();

      case NAME:
        return getName();

      case NTYPE:
        return getNtype();

      case PRIVILEGE:
        return getPrivilege();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_TYPE:
        return isSetServiceType();
      case USER:
        return isSetUser();
      case NAME:
        return isSetName();
      case NTYPE:
        return isSetNtype();
      case PRIVILEGE:
        return isSetPrivilege();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPrivileges4Dw_args)
        return this.equals((setPrivileges4Dw_args)that);
      return false;
    }

    public boolean equals(setPrivileges4Dw_args that) {
      if (that == null)
        return false;

      boolean this_present_serviceType = true && this.isSetServiceType();
      boolean that_present_serviceType = true && that.isSetServiceType();
      if (this_present_serviceType || that_present_serviceType) {
        if (!(this_present_serviceType && that_present_serviceType))
          return false;
        if (!this.serviceType.equals(that.serviceType))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_ntype = true && this.isSetNtype();
      boolean that_present_ntype = true && that.isSetNtype();
      if (this_present_ntype || that_present_ntype) {
        if (!(this_present_ntype && that_present_ntype))
          return false;
        if (!this.ntype.equals(that.ntype))
          return false;
      }

      boolean this_present_privilege = true;
      boolean that_present_privilege = true;
      if (this_present_privilege || that_present_privilege) {
        if (!(this_present_privilege && that_present_privilege))
          return false;
        if (this.privilege != that.privilege)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_serviceType = true && (isSetServiceType());
      list.add(present_serviceType);
      if (present_serviceType)
        list.add(serviceType);

      boolean present_user = true && (isSetUser());
      list.add(present_user);
      if (present_user)
        list.add(user);

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_ntype = true && (isSetNtype());
      list.add(present_ntype);
      if (present_ntype)
        list.add(ntype);

      boolean present_privilege = true;
      list.add(present_privilege);
      if (present_privilege)
        list.add(privilege);

      return list.hashCode();
    }

    @Override
    public int compareTo(setPrivileges4Dw_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetServiceType()).compareTo(other.isSetServiceType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceType, other.serviceType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNtype()).compareTo(other.isSetNtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ntype, other.ntype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrivilege()).compareTo(other.isSetPrivilege());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrivilege()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privilege, other.privilege);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPrivileges4Dw_args(");
      boolean first = true;

      sb.append("serviceType:");
      if (this.serviceType == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ntype:");
      if (this.ntype == null) {
        sb.append("null");
      } else {
        sb.append(this.ntype);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("privilege:");
      sb.append(this.privilege);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPrivileges4Dw_argsStandardSchemeFactory implements SchemeFactory {
      public setPrivileges4Dw_argsStandardScheme getScheme() {
        return new setPrivileges4Dw_argsStandardScheme();
      }
    }

    private static class setPrivileges4Dw_argsStandardScheme extends StandardScheme<setPrivileges4Dw_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPrivileges4Dw_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVICE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceType = iprot.readString();
                struct.setServiceTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NTYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ntype = iprot.readString();
                struct.setNtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PRIVILEGE
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.privilege = iprot.readByte();
                struct.setPrivilegeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPrivileges4Dw_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serviceType != null) {
          oprot.writeFieldBegin(SERVICE_TYPE_FIELD_DESC);
          oprot.writeString(struct.serviceType);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.ntype != null) {
          oprot.writeFieldBegin(NTYPE_FIELD_DESC);
          oprot.writeString(struct.ntype);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRIVILEGE_FIELD_DESC);
        oprot.writeByte(struct.privilege);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPrivileges4Dw_argsTupleSchemeFactory implements SchemeFactory {
      public setPrivileges4Dw_argsTupleScheme getScheme() {
        return new setPrivileges4Dw_argsTupleScheme();
      }
    }

    private static class setPrivileges4Dw_argsTupleScheme extends TupleScheme<setPrivileges4Dw_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPrivileges4Dw_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServiceType()) {
          optionals.set(0);
        }
        if (struct.isSetUser()) {
          optionals.set(1);
        }
        if (struct.isSetName()) {
          optionals.set(2);
        }
        if (struct.isSetNtype()) {
          optionals.set(3);
        }
        if (struct.isSetPrivilege()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetServiceType()) {
          oprot.writeString(struct.serviceType);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetNtype()) {
          oprot.writeString(struct.ntype);
        }
        if (struct.isSetPrivilege()) {
          oprot.writeByte(struct.privilege);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPrivileges4Dw_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.serviceType = iprot.readString();
          struct.setServiceTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(2)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ntype = iprot.readString();
          struct.setNtypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.privilege = iprot.readByte();
          struct.setPrivilegeIsSet(true);
        }
      }
    }

  }

  public static class setPrivileges4Dw_result implements org.apache.thrift.TBase<setPrivileges4Dw_result, setPrivileges4Dw_result._Fields>, java.io.Serializable, Cloneable, Comparable<setPrivileges4Dw_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPrivileges4Dw_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AUTH_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RUNTIME_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("runtimeException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPrivileges4Dw_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPrivileges4Dw_resultTupleSchemeFactory());
    }

    public Reply success; // required
    public AuthorizationException authException; // required
    public RuntimeException runtimeException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AUTH_EXCEPTION((short)1, "authException"),
      RUNTIME_EXCEPTION((short)2, "runtimeException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AUTH_EXCEPTION
            return AUTH_EXCEPTION;
          case 2: // RUNTIME_EXCEPTION
            return RUNTIME_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Reply.class)));
      tmpMap.put(_Fields.AUTH_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RUNTIME_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("runtimeException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPrivileges4Dw_result.class, metaDataMap);
    }

    public setPrivileges4Dw_result() {
    }

    public setPrivileges4Dw_result(
      Reply success,
      AuthorizationException authException,
      RuntimeException runtimeException)
    {
      this();
      this.success = success;
      this.authException = authException;
      this.runtimeException = runtimeException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPrivileges4Dw_result(setPrivileges4Dw_result other) {
      if (other.isSetSuccess()) {
        this.success = new Reply(other.success);
      }
      if (other.isSetAuthException()) {
        this.authException = new AuthorizationException(other.authException);
      }
      if (other.isSetRuntimeException()) {
        this.runtimeException = new RuntimeException(other.runtimeException);
      }
    }

    public setPrivileges4Dw_result deepCopy() {
      return new setPrivileges4Dw_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.authException = null;
      this.runtimeException = null;
    }

    public Reply getSuccess() {
      return this.success;
    }

    public setPrivileges4Dw_result setSuccess(Reply success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public AuthorizationException getAuthException() {
      return this.authException;
    }

    public setPrivileges4Dw_result setAuthException(AuthorizationException authException) {
      this.authException = authException;
      return this;
    }

    public void unsetAuthException() {
      this.authException = null;
    }

    /** Returns true if field authException is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthException() {
      return this.authException != null;
    }

    public void setAuthExceptionIsSet(boolean value) {
      if (!value) {
        this.authException = null;
      }
    }

    public RuntimeException getRuntimeException() {
      return this.runtimeException;
    }

    public setPrivileges4Dw_result setRuntimeException(RuntimeException runtimeException) {
      this.runtimeException = runtimeException;
      return this;
    }

    public void unsetRuntimeException() {
      this.runtimeException = null;
    }

    /** Returns true if field runtimeException is set (has been assigned a value) and false otherwise */
    public boolean isSetRuntimeException() {
      return this.runtimeException != null;
    }

    public void setRuntimeExceptionIsSet(boolean value) {
      if (!value) {
        this.runtimeException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Reply)value);
        }
        break;

      case AUTH_EXCEPTION:
        if (value == null) {
          unsetAuthException();
        } else {
          setAuthException((AuthorizationException)value);
        }
        break;

      case RUNTIME_EXCEPTION:
        if (value == null) {
          unsetRuntimeException();
        } else {
          setRuntimeException((RuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AUTH_EXCEPTION:
        return getAuthException();

      case RUNTIME_EXCEPTION:
        return getRuntimeException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AUTH_EXCEPTION:
        return isSetAuthException();
      case RUNTIME_EXCEPTION:
        return isSetRuntimeException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPrivileges4Dw_result)
        return this.equals((setPrivileges4Dw_result)that);
      return false;
    }

    public boolean equals(setPrivileges4Dw_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_authException = true && this.isSetAuthException();
      boolean that_present_authException = true && that.isSetAuthException();
      if (this_present_authException || that_present_authException) {
        if (!(this_present_authException && that_present_authException))
          return false;
        if (!this.authException.equals(that.authException))
          return false;
      }

      boolean this_present_runtimeException = true && this.isSetRuntimeException();
      boolean that_present_runtimeException = true && that.isSetRuntimeException();
      if (this_present_runtimeException || that_present_runtimeException) {
        if (!(this_present_runtimeException && that_present_runtimeException))
          return false;
        if (!this.runtimeException.equals(that.runtimeException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_authException = true && (isSetAuthException());
      list.add(present_authException);
      if (present_authException)
        list.add(authException);

      boolean present_runtimeException = true && (isSetRuntimeException());
      list.add(present_runtimeException);
      if (present_runtimeException)
        list.add(runtimeException);

      return list.hashCode();
    }

    @Override
    public int compareTo(setPrivileges4Dw_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthException()).compareTo(other.isSetAuthException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authException, other.authException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuntimeException()).compareTo(other.isSetRuntimeException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuntimeException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtimeException, other.runtimeException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPrivileges4Dw_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authException:");
      if (this.authException == null) {
        sb.append("null");
      } else {
        sb.append(this.authException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("runtimeException:");
      if (this.runtimeException == null) {
        sb.append("null");
      } else {
        sb.append(this.runtimeException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPrivileges4Dw_resultStandardSchemeFactory implements SchemeFactory {
      public setPrivileges4Dw_resultStandardScheme getScheme() {
        return new setPrivileges4Dw_resultStandardScheme();
      }
    }

    private static class setPrivileges4Dw_resultStandardScheme extends StandardScheme<setPrivileges4Dw_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPrivileges4Dw_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Reply();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AUTH_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authException = new AuthorizationException();
                struct.authException.read(iprot);
                struct.setAuthExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RUNTIME_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.runtimeException = new RuntimeException();
                struct.runtimeException.read(iprot);
                struct.setRuntimeExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPrivileges4Dw_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authException != null) {
          oprot.writeFieldBegin(AUTH_EXCEPTION_FIELD_DESC);
          struct.authException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.runtimeException != null) {
          oprot.writeFieldBegin(RUNTIME_EXCEPTION_FIELD_DESC);
          struct.runtimeException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPrivileges4Dw_resultTupleSchemeFactory implements SchemeFactory {
      public setPrivileges4Dw_resultTupleScheme getScheme() {
        return new setPrivileges4Dw_resultTupleScheme();
      }
    }

    private static class setPrivileges4Dw_resultTupleScheme extends TupleScheme<setPrivileges4Dw_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPrivileges4Dw_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAuthException()) {
          optionals.set(1);
        }
        if (struct.isSetRuntimeException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAuthException()) {
          struct.authException.write(oprot);
        }
        if (struct.isSetRuntimeException()) {
          struct.runtimeException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPrivileges4Dw_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new Reply();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.authException = new AuthorizationException();
          struct.authException.read(iprot);
          struct.setAuthExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.runtimeException = new RuntimeException();
          struct.runtimeException.read(iprot);
          struct.setRuntimeExceptionIsSet(true);
        }
      }
    }

  }

  public static class request_args implements org.apache.thrift.TBase<request_args, request_args._Fields>, java.io.Serializable, Cloneable, Comparable<request_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("request_args");

    private static final org.apache.thrift.protocol.TField SERVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new request_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new request_argsTupleSchemeFactory());
    }

    public String serviceType; // required
    public Map<String,String> request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_TYPE((short)1, "serviceType"),
      REQUEST((short)2, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_TYPE
            return SERVICE_TYPE;
          case 2: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("serviceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(request_args.class, metaDataMap);
    }

    public request_args() {
    }

    public request_args(
      String serviceType,
      Map<String,String> request)
    {
      this();
      this.serviceType = serviceType;
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public request_args(request_args other) {
      if (other.isSetServiceType()) {
        this.serviceType = other.serviceType;
      }
      if (other.isSetRequest()) {
        Map<String,String> __this__request = new HashMap<String,String>(other.request);
        this.request = __this__request;
      }
    }

    public request_args deepCopy() {
      return new request_args(this);
    }

    @Override
    public void clear() {
      this.serviceType = null;
      this.request = null;
    }

    public String getServiceType() {
      return this.serviceType;
    }

    public request_args setServiceType(String serviceType) {
      this.serviceType = serviceType;
      return this;
    }

    public void unsetServiceType() {
      this.serviceType = null;
    }

    /** Returns true if field serviceType is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceType() {
      return this.serviceType != null;
    }

    public void setServiceTypeIsSet(boolean value) {
      if (!value) {
        this.serviceType = null;
      }
    }

    public int getRequestSize() {
      return (this.request == null) ? 0 : this.request.size();
    }

    public void putToRequest(String key, String val) {
      if (this.request == null) {
        this.request = new HashMap<String,String>();
      }
      this.request.put(key, val);
    }

    public Map<String,String> getRequest() {
      return this.request;
    }

    public request_args setRequest(Map<String,String> request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_TYPE:
        if (value == null) {
          unsetServiceType();
        } else {
          setServiceType((String)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_TYPE:
        return getServiceType();

      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_TYPE:
        return isSetServiceType();
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof request_args)
        return this.equals((request_args)that);
      return false;
    }

    public boolean equals(request_args that) {
      if (that == null)
        return false;

      boolean this_present_serviceType = true && this.isSetServiceType();
      boolean that_present_serviceType = true && that.isSetServiceType();
      if (this_present_serviceType || that_present_serviceType) {
        if (!(this_present_serviceType && that_present_serviceType))
          return false;
        if (!this.serviceType.equals(that.serviceType))
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_serviceType = true && (isSetServiceType());
      list.add(present_serviceType);
      if (present_serviceType)
        list.add(serviceType);

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      return list.hashCode();
    }

    @Override
    public int compareTo(request_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetServiceType()).compareTo(other.isSetServiceType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceType, other.serviceType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("request_args(");
      boolean first = true;

      sb.append("serviceType:");
      if (this.serviceType == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class request_argsStandardSchemeFactory implements SchemeFactory {
      public request_argsStandardScheme getScheme() {
        return new request_argsStandardScheme();
      }
    }

    private static class request_argsStandardScheme extends StandardScheme<request_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, request_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVICE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceType = iprot.readString();
                struct.setServiceTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                  struct.request = new HashMap<String,String>(2*_map16.size);
                  String _key17;
                  String _val18;
                  for (int _i19 = 0; _i19 < _map16.size; ++_i19)
                  {
                    _key17 = iprot.readString();
                    _val18 = iprot.readString();
                    struct.request.put(_key17, _val18);
                  }
                  iprot.readMapEnd();
                }
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, request_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serviceType != null) {
          oprot.writeFieldBegin(SERVICE_TYPE_FIELD_DESC);
          oprot.writeString(struct.serviceType);
          oprot.writeFieldEnd();
        }
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.request.size()));
            for (Map.Entry<String, String> _iter20 : struct.request.entrySet())
            {
              oprot.writeString(_iter20.getKey());
              oprot.writeString(_iter20.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class request_argsTupleSchemeFactory implements SchemeFactory {
      public request_argsTupleScheme getScheme() {
        return new request_argsTupleScheme();
      }
    }

    private static class request_argsTupleScheme extends TupleScheme<request_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, request_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServiceType()) {
          optionals.set(0);
        }
        if (struct.isSetRequest()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetServiceType()) {
          oprot.writeString(struct.serviceType);
        }
        if (struct.isSetRequest()) {
          {
            oprot.writeI32(struct.request.size());
            for (Map.Entry<String, String> _iter21 : struct.request.entrySet())
            {
              oprot.writeString(_iter21.getKey());
              oprot.writeString(_iter21.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, request_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.serviceType = iprot.readString();
          struct.setServiceTypeIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.request = new HashMap<String,String>(2*_map22.size);
            String _key23;
            String _val24;
            for (int _i25 = 0; _i25 < _map22.size; ++_i25)
            {
              _key23 = iprot.readString();
              _val24 = iprot.readString();
              struct.request.put(_key23, _val24);
            }
          }
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class request_result implements org.apache.thrift.TBase<request_result, request_result._Fields>, java.io.Serializable, Cloneable, Comparable<request_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("request_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AUTH_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RUNTIME_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("runtimeException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new request_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new request_resultTupleSchemeFactory());
    }

    public Reply success; // required
    public AuthorizationException authException; // required
    public RuntimeException runtimeException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AUTH_EXCEPTION((short)1, "authException"),
      RUNTIME_EXCEPTION((short)2, "runtimeException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AUTH_EXCEPTION
            return AUTH_EXCEPTION;
          case 2: // RUNTIME_EXCEPTION
            return RUNTIME_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Reply.class)));
      tmpMap.put(_Fields.AUTH_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RUNTIME_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("runtimeException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(request_result.class, metaDataMap);
    }

    public request_result() {
    }

    public request_result(
      Reply success,
      AuthorizationException authException,
      RuntimeException runtimeException)
    {
      this();
      this.success = success;
      this.authException = authException;
      this.runtimeException = runtimeException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public request_result(request_result other) {
      if (other.isSetSuccess()) {
        this.success = new Reply(other.success);
      }
      if (other.isSetAuthException()) {
        this.authException = new AuthorizationException(other.authException);
      }
      if (other.isSetRuntimeException()) {
        this.runtimeException = new RuntimeException(other.runtimeException);
      }
    }

    public request_result deepCopy() {
      return new request_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.authException = null;
      this.runtimeException = null;
    }

    public Reply getSuccess() {
      return this.success;
    }

    public request_result setSuccess(Reply success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public AuthorizationException getAuthException() {
      return this.authException;
    }

    public request_result setAuthException(AuthorizationException authException) {
      this.authException = authException;
      return this;
    }

    public void unsetAuthException() {
      this.authException = null;
    }

    /** Returns true if field authException is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthException() {
      return this.authException != null;
    }

    public void setAuthExceptionIsSet(boolean value) {
      if (!value) {
        this.authException = null;
      }
    }

    public RuntimeException getRuntimeException() {
      return this.runtimeException;
    }

    public request_result setRuntimeException(RuntimeException runtimeException) {
      this.runtimeException = runtimeException;
      return this;
    }

    public void unsetRuntimeException() {
      this.runtimeException = null;
    }

    /** Returns true if field runtimeException is set (has been assigned a value) and false otherwise */
    public boolean isSetRuntimeException() {
      return this.runtimeException != null;
    }

    public void setRuntimeExceptionIsSet(boolean value) {
      if (!value) {
        this.runtimeException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Reply)value);
        }
        break;

      case AUTH_EXCEPTION:
        if (value == null) {
          unsetAuthException();
        } else {
          setAuthException((AuthorizationException)value);
        }
        break;

      case RUNTIME_EXCEPTION:
        if (value == null) {
          unsetRuntimeException();
        } else {
          setRuntimeException((RuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AUTH_EXCEPTION:
        return getAuthException();

      case RUNTIME_EXCEPTION:
        return getRuntimeException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AUTH_EXCEPTION:
        return isSetAuthException();
      case RUNTIME_EXCEPTION:
        return isSetRuntimeException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof request_result)
        return this.equals((request_result)that);
      return false;
    }

    public boolean equals(request_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_authException = true && this.isSetAuthException();
      boolean that_present_authException = true && that.isSetAuthException();
      if (this_present_authException || that_present_authException) {
        if (!(this_present_authException && that_present_authException))
          return false;
        if (!this.authException.equals(that.authException))
          return false;
      }

      boolean this_present_runtimeException = true && this.isSetRuntimeException();
      boolean that_present_runtimeException = true && that.isSetRuntimeException();
      if (this_present_runtimeException || that_present_runtimeException) {
        if (!(this_present_runtimeException && that_present_runtimeException))
          return false;
        if (!this.runtimeException.equals(that.runtimeException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_authException = true && (isSetAuthException());
      list.add(present_authException);
      if (present_authException)
        list.add(authException);

      boolean present_runtimeException = true && (isSetRuntimeException());
      list.add(present_runtimeException);
      if (present_runtimeException)
        list.add(runtimeException);

      return list.hashCode();
    }

    @Override
    public int compareTo(request_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthException()).compareTo(other.isSetAuthException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authException, other.authException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuntimeException()).compareTo(other.isSetRuntimeException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuntimeException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtimeException, other.runtimeException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("request_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authException:");
      if (this.authException == null) {
        sb.append("null");
      } else {
        sb.append(this.authException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("runtimeException:");
      if (this.runtimeException == null) {
        sb.append("null");
      } else {
        sb.append(this.runtimeException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class request_resultStandardSchemeFactory implements SchemeFactory {
      public request_resultStandardScheme getScheme() {
        return new request_resultStandardScheme();
      }
    }

    private static class request_resultStandardScheme extends StandardScheme<request_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, request_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Reply();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AUTH_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authException = new AuthorizationException();
                struct.authException.read(iprot);
                struct.setAuthExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RUNTIME_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.runtimeException = new RuntimeException();
                struct.runtimeException.read(iprot);
                struct.setRuntimeExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, request_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authException != null) {
          oprot.writeFieldBegin(AUTH_EXCEPTION_FIELD_DESC);
          struct.authException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.runtimeException != null) {
          oprot.writeFieldBegin(RUNTIME_EXCEPTION_FIELD_DESC);
          struct.runtimeException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class request_resultTupleSchemeFactory implements SchemeFactory {
      public request_resultTupleScheme getScheme() {
        return new request_resultTupleScheme();
      }
    }

    private static class request_resultTupleScheme extends TupleScheme<request_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, request_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAuthException()) {
          optionals.set(1);
        }
        if (struct.isSetRuntimeException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAuthException()) {
          struct.authException.write(oprot);
        }
        if (struct.isSetRuntimeException()) {
          struct.runtimeException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, request_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new Reply();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.authException = new AuthorizationException();
          struct.authException.read(iprot);
          struct.setAuthExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.runtimeException = new RuntimeException();
          struct.runtimeException.read(iprot);
          struct.setRuntimeExceptionIsSet(true);
        }
      }
    }

  }

}
